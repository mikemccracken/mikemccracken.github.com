<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | michael-mccracken.net]]></title>
  <link href="http://mikemccracken.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mikemccracken.github.com/"/>
  <updated>2012-08-17T00:23:52-07:00</updated>
  <id>http://mikemccracken.github.com/</id>
  <author>
    <name><![CDATA[Michael McCracken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA['Editor Wars']]></title>
    <link href="http://mikemccracken.github.com/blog/2012/08/16/editor-wars/"/>
    <updated>2012-08-16T23:44:00-07:00</updated>
    <id>http://mikemccracken.github.com/blog/2012/08/16/editor-wars</id>
    <content type="html"><![CDATA[<p>An idea I'd like to see: Editor Wars, the game of hacking at code.</p>

<p>Hackers compete on how fast they can complete code editing tasks from
a variety of languages, with results plotted and dissected on a
web leaderboard. The idea is not to evaluate language understanding or
design, but simply editing skill and speed in the kind of thing that
editor flame wars start over.</p>

<p>The tasks could be simple refactorings, like renaming a function
throughout a source tree, or extracting code into a method. I'd expect
this would show advantages of specialized refactoring tools in some
IDEs. Other tasks might be more complex, like writing a new set of
functions, a whole class, or adding functions to a class to conform to
a protocol or interface. Good template support and autocomplete might
be an advantage here. Or maybe you want to add conditional debug
logging around a set of functions, with each call having a separate
hardcoded counter value? Surely powerful macros win this task?
Naturally, new tasks could be submitted by the public, and voted on.
Each task would have a "correct" answer, but if you're really clever
you could always suggest a better correct answer.</p>

<p>Use of extensions and custom macros would be happily encouraged, as
long as you can share what you've used.</p>

<p>You'd need either an editor plugin or at least something that watches
files efficiently to get the split-second timing your contestants will
demand. Ideally you'd be able to record keystrokes and grab the source
for any macros you call, then the site would be able to show a replay
for the viewing public.</p>

<p>It'd be fascinating to learn how other people use your favorite editor
by watching the best of the best compete. Not to mention, just imagine
the forum threads arguing over the graphs from the vast database of
editor timings.</p>

<p>Anyone want to build this?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Link: The Axis of Eval: What's a condition system and why do you want one?]]></title>
    <link href="http://mikemccracken.github.com/blog/2011/06/28/link-the-axis-of-eval-whats-a-condition-system-and-why-do-you-want-one/"/>
    <updated>2011-06-28T10:08:01-07:00</updated>
    <id>http://mikemccracken.github.com/blog/2011/06/28/link-the-axis-of-eval-whats-a-condition-system-and-why-do-you-want-one</id>
    <content type="html"><![CDATA[<p>A nice explanation of conditions in Common Lisp from Manuel Simoni, with example code. This looks like a major improvement on the exception handling in any language I've used for anything big.</p>

<p><a href="http://axisofeval.blogspot.com/2011/04/whats-condition-system-and-why-do-you.html">The Axis of Eval: What's a condition system and why do you want one?</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cram & Simple testing for shell programs]]></title>
    <link href="http://mikemccracken.github.com/blog/2011/04/05/cram-simple-testing-for-shell-programs/"/>
    <updated>2011-04-05T07:36:25-07:00</updated>
    <id>http://mikemccracken.github.com/blog/2011/04/05/cram-simple-testing-for-shell-programs</id>
    <content type="html"><![CDATA[<p><a href="http://bitheap.org/cram/">Cram</a> is a test framework for command line programs, originally written for mercurial's test suite.</p>

<p>I like the approach - it just reads a shell transcript and runs the commands it finds. If the output doesn't match, it shows you a diff. It's kind of like doctest.</p>

<p>It looks refreshingly simple to get started with, something that so many other test frameworks fail horribly at.</p>

<p>A while ago, I wrote something similar for work. After trying and failing to find a testing framework that wasn't over-engineered, I wrote a script that looks in <code>./test/</code>, and runs every file named <code>whatever.test</code>, and compares output to files  <code>whatever.test.stdout</code> and  <code>whatever.test.stderr</code>, if they exist.
If not, it just uses the return value to determine success.</p>

<p>I loved how easy it was to add a test. Just write a script! There is no step two.</p>

<p>(<code>cram</code> found via <a href="http://ivory.idyll.org/blog/mar-11/trying-out-cram">Titus Brown</a> )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Early Days of Java in Sun Labs - Chuck McManis on HN, via Manuel Simoni]]></title>
    <link href="http://mikemccracken.github.com/blog/2011/03/30/early-days-of-java-in-sun-labs-chuck-mcmanis-on-hn-via-manuel-simoni/"/>
    <updated>2011-03-30T03:26:40-07:00</updated>
    <id>http://mikemccracken.github.com/blog/2011/03/30/early-days-of-java-in-sun-labs-chuck-mcmanis-on-hn-via-manuel-simoni</id>
    <content type="html"><![CDATA[<p>From <a href="http://axisofeval.blogspot.com/2011/03/truth-is-stranger-than-fiction.html">The Axis of Eval: "Truth IS stranger than fiction"</a>: Chuck McManis explains the cancellation and subsequent fame of Java.</p>

<p>It's fascinating to me how often you hear about these overnight successes that took years to develop and were canceled, given up for dead, etc. many times.</p>

<p>I remember hearing similar stories about Self and Erlang at HOPL-3, the History of Programming Languages conference. Maybe you shouldn't bet on the success of a new language unless it's been cancelled or abandoned at least once?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subversion Client Issues]]></title>
    <link href="http://mikemccracken.github.com/blog/2009/07/13/subversion-clients/"/>
    <updated>2009-07-13T00:17:14-07:00</updated>
    <id>http://mikemccracken.github.com/blog/2009/07/13/subversion-clients</id>
    <content type="html"><![CDATA[<p>I use subversion, and won't switch to something newer for a while, so it's worth looking at how to polish that old hammer. I'm used to using the command line svn, or emacs. But recently I decided to try out a few of the nice GUI clients that are around, including <a href="http://versionsapp.com/">Versions</a>, <a href="http://zigzig.com/">ZigVersion</a> and <a href="http://www.zennaware.com/cornerstone/">Cornerstone</a>.</p>

<p>Of these, the only one that's polished enough to lure me away from emacs and seems to support my favorite mode of working is Cornerstone, and it still gets it a little wrong.</p>

<p>I like to write log comments while looking at (and scrolling through) the diffs for the files I'm committing. This means I want a text field for writing log comments on the same screen as the diffs, that isn't modal, and doesn't stop me from moving around between multiple diffs.</p>

<p>As far as I could tell, I couldn't get the comment field and the diff display shown together in Versions, and while I could in ZigVersion, that app had a subpar diff display and lacked polish overall, missing key shortcuts where I'd expect them, for instance. Cornerstone almost lets me do what I want, but it displays the comment field in a modal sheet, so I have to cancel to change which diff I'm looking at.</p>

<p>This is easy in emacs, but I like a nicer diff GUI. Am I just missing something? This feels like a natural workflow, so it seems strange that no clients support it well.</p>
]]></content>
  </entry>
  
</feed>

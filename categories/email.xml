<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>michael-mccracken.net (email)</title><link>http://michael-mccracken.net/</link><description></description><language>en</language><lastBuildDate>Fri, 27 Jun 2014 10:00:51 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Links</title><link>http://michael-mccracken.net/2012/10/links.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10857030/whats-so-bad-about-template-haskell"&gt;What's so bad about Template Haskell? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A bunch of good answers to why Template Haskell is occasionally maligned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10845179/which-haskell-ghc-extensions-should-users-use-avoid/10849782#10849782"&gt;Which Haskell (GHC) extensions should users use/avoid? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting list of aesthetic judgements of haskell extensions. At press time I don't know what most of these words mean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.yesodweb.com/blog/2011/04/yesod-template-haskell"&gt;Yesod and Template Haskell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Short post on why Yesod uses template haskell (which has a bad rep)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://imakewebthings.com/deck.js/"&gt;deck.js » Modern HTML Presentations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best "Write your presentations in HTML" thing I've seen yet, although I'm not sure how great it'd be at complex visuals or builds. Yes sometimes builds are good! &lt;em&gt;SOMETIMES&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://redbot.org/"&gt;REDbot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RED is a robot that checks HTTP resources to see how they'll behave, pointing out common problems and suggesting improvements. Although it is not a HTTP conformance tester, it can find a number of HTTP-related issues. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/visi-lang/visi"&gt;.@dpp’s Visi looks to be exactly the thing when Soulver isn’t enough and spreadsheets are rigid github.com/visi-lang/visi #emerginglangs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Should I look at this before posting a link? Nah... But I will look at it, eventually! It looks interesting, I love this kind of stuff - although as usual I wonder if this is something you can already get in Mathematica but no one knows because it's so expensive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://highscalability.com/blog/2012/7/30/prismatic-architecture-using-machine-learning-on-social-netw.html"&gt;High Scalability - Prismatic Architecture - Using Machine Learning on Social Networks to Figure Out What You Should Read on the Web &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Probably interesting? I skimmed this, I'm not gonna lie, I don't remember much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://deslide.clusterfake.net/"&gt;Deslidefied HTML&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really useful bookmark to make slideshow news articles readable on one page. I am using it all the time!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pragprog.com/magazines/2012-09/thinking-functionally-with-haskell"&gt;Thinking Functionally with Haskell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;""In which we explore what modern type systems bring to the table. Imagine an approach to programming where you write down some description of what your code should do, then before running your code you run some automatic tool to see if the code matches the description. That’s Test-driven development, you say!  Actually, this is what you are doing when you use static types in most languages too. Types are a description of the code’s inputs and outputs, and the check ensures that inputs and outputs match up and are used consistently. Modern type systems—such as in Haskell or above—are very flexible, and allow these descriptions to be quite detailed; plus they are not too obtrusive in use and often very helpful.  One point I’ll investigate here is how advances in types are converging with new ideas on testing, to the point where (I claim) the old distinctions are starting to blur and starting to open up exciting new possibilities—hence my suggestion that we need a new word to describe what we’re doing that is free from preconceptions and out-dated thinking.  So put aside your bad experiences from Java, and prepare to be amazed! ""&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://feedproxy.google.com/~r/ezyang/~3/3Vb6-OhkZws/"&gt;So you want to hack on IMAP…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;"Well, first off, you’re horribly misinformed: you do not actually want to hack on IMAP." (I agree, IMAP bad.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://waxy.org/2008/06/the_machine_that_changed_the_world/"&gt;The Machine That Changed the World: Great Brains - Waxy.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Documentary about computing history:
"It's a whirlwind tour of computing before the Web, with brilliant archival footage and interviews with key players — several of whom passed away since the filming. Jointly produced by WGBH Boston and the BBC, it originally aired in the UK as The Dream Machine before its U.S. premiere in January 1992. Its broadcast was accompanied by a book co-written by the documentary's producer Jon Palfreman."&lt;/p&gt;
&lt;/li&gt;
</description><category>GHC extensions</category><category>dependent-types</category><category>deslide</category><category>email</category><category>functional-programming</category><category>haskell</category><category>html</category><category>imap</category><category>javascript</category><category>presentations</category><category>programming</category><category>scalability</category><category>slides</category><category>slideshow</category><category>template-haskell</category><category>testing</category><category>tools</category><category>types</category><category>webarchitecture</category><category>yesod</category><guid>http://michael-mccracken.net/2012/10/links.html</guid><pubDate>Mon, 08 Oct 2012 07:47:00 GMT</pubDate></item><item><title>Links: Hacking, Music in Python, Rust &amp; unitasking</title><link>http://michael-mccracken.net/2012/04/links-hacking-music-in-python-rust-unitaskimg.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for April 5th through April 6th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://lemire.me/blog/archives/2011/06/06/why-i-still-program/"&gt;Why I still program&lt;/a&gt; - "I believe that the rejection of programming as a lower activity can be explained by the Theory of the leisure class. In effect, we do not seek utility but prestige. There is no prestige in tool-making, cooking or farming. To maximize your prestige, you must rise up to the leisure class: you work must not be immediately useful."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://lemire.me/blog/archives/2012/03/20/from-counting-citations-to-measuring-usage-help-needed/"&gt;From counting citations to measuring usage (help needed!)&lt;/a&gt; - Building a Better Citation Index&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mailplaneapp.com/blog/entry/workhacks.com_top_3_gmail_management_apps_for_mac"&gt;workhacks.com: Top 3 Gmail Management Apps for Mac - Mailplane Blog&lt;/a&gt; - includes a list of gmail plugins that look useful&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://prezjordan.github.com/Melopy/"&gt;Melopy&lt;/a&gt; - 
&lt;code&gt;  &lt;br&gt;
    """
    &amp;gt;&amp;gt;&amp;gt; from melopy import Melopy
    &amp;gt;&amp;gt;&amp;gt; m = Melopy('mysong')
    &amp;gt;&amp;gt;&amp;gt; m.add_quarter_note('A4')
    &amp;gt;&amp;gt;&amp;gt; m.add_quarter_note('C#5')
    &amp;gt;&amp;gt;&amp;gt; m.add_quarter_note('E5')
    &amp;gt;&amp;gt;&amp;gt; m.render()
    [==================================================] 100%
    Done
    """
&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://doc.rust-lang.org/doc/tutorial.html#expression-syntax"&gt;Rust Language Tutorial: Expression Syntax&lt;/a&gt; - Starts out good, but the "leave out a semicolon to return a value" leaves a bad taste. Why overload semicolons like that? Why not just use 'ret'?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.deliberatism.com/blog/forget-self-improvement/"&gt;Forget Self-Improvement&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blogs.hbr.org/schwartz/2012/03/the-magic-of-doing-one-thing-a.html"&gt;The Magic of Doing One Thing at a Time - Tony Schwartz - Harvard Business Review&lt;/a&gt; - A few good points on avoiding multitasking burnout. Nothing too new, but maybe if people keep repeating it in places like HBR, then it'll start to become conventional business wisdom?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>business</category><category>citation</category><category>email</category><category>gmail</category><category>impact</category><category>libraries</category><category>links</category><category>machine-learning</category><category>mikechecksmail</category><category>multitasking</category><category>music</category><category>pinboard-links</category><category>productivity</category><category>programming</category><category>publication</category><category>python</category><category>ranking</category><category>research</category><category>rust</category><guid>http://michael-mccracken.net/2012/04/links-hacking-music-in-python-rust-unitaskimg.html</guid><pubDate>Wed, 11 Apr 2012 23:15:00 GMT</pubDate></item><item><title>Links for December 28th - 29th (Including PyCon2012 Talks of Interest)</title><link>http://michael-mccracken.net/2012/01/links-for-december-28th-29th-including-pycon2012-talks-of-interest.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for December 28th through December 29th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mail.python.org/pipermail/email-sig/"&gt;The Email-SIG Archives&lt;/a&gt; - Archives of group working on email package in python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.abisource.com/projects/link-grammar/"&gt;Link Grammar&lt;/a&gt; - grammar parsing package homepage as part of abiword&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://networkx.lanl.gov/"&gt;Overview -- NetworkX 1.6 documentation&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dmalcolm.livejournal.com/6560.html"&gt;dmalcolm - Automatically detecting reference-count bugs in Python extension modules&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/468/"&gt;PyCon US 2012: Parsing Horrible Things&lt;/a&gt; - If you've ever wanted to get started with parsers, here's your chance for a ground-floor introduction. A harebrained spare-time project gives birth to a whirlwind journey from basic algorithms to Python libraries and, at last, to a parser for one of the craziest syntaxes out there: the MediaWiki grammar that drives Wikipedia.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/426/"&gt;PyCon US 2012: Python for data lovers&lt;/a&gt; - Exploring and analyzing data can be daunting and time-consuming, even for data lovers. Python can make the process fun and exciting. We will present techniques of data analysis, along with python tools that help you explore and map data. Our talk includes examples that show how python libraries such as csvkit, matplotlib, scipy, networkx and pysal can help you dig into and make sense of your data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/407/"&gt;PyCon US 2012: Time series analysis in python&lt;/a&gt; - Analyzing, storing and visualizing time-series efficiently are recurring though difficult tasks in various aspects of scientific data analysis such as meteorological forecasting, financial modeling, ... In this talk we will explore the current Python ecosystem for doing this effectively, comparing options, using only open source packages that are mature yet still under active development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/378/"&gt;PyCon US 2012: Email package&lt;/a&gt; - The email package in the Python Standard library has had a somewhat rocky transition into the Python3 era, and still doesn't handle non-ASCII easily. That is about to change. This talk will compare how things worked in Python2 (the past), how things work now (in Python3.2), and how things will work much better in the future (hopefully Python3.3).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/341/"&gt;PyCon US 2012: Advanced SQLAlchemy&lt;/a&gt; - How do you take the big step from casual SQLAlchemy user, who treats your database as a mysterious object store, to advanced power user, who optimizes critical queries, plans indexing and migrations, and generates efficient reports? This talk will teach you how databases think; why humanity invented the Relational Algebra; and how SQLAlchemy grants you access to relational power.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/304/"&gt;PyCon US 2012 : Python FUSE&lt;/a&gt; - Contrary to classical kernel residing file-systems in *NIX, FUSE is an API to develop file systems in user space. This talk details internals of FUSE, developing your own file-system with Python-FUSE, followed by creative application of Python-FUSE based file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/303/"&gt;PyCon US 2012: What's new in the PyStdLib&lt;/a&gt; - Lots of Interesting stuff has gone into Python Standard library in 2.7, 3.1, 3.2 and 3.3 release. Some interesting features that went in really make programmers life easy and it can bring in a 'wow' factor to their code. Additionally, it can also help the external library developers to relook at the their libraries to use new facilities available from standard library modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk distills stuff from What's new document from 2.7, 3.2 and 3.3 and presents some of the choicest new features from Python standard library. Since a lots has gone in since 2.7, focus would be given to those which have had good discussion in tracker or in python-dev and would in general was a most sought out one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/246/"&gt;PyCon US 2012: Code Generation in Python: Dismantling Jinja&lt;/a&gt; - For many DSLs such as templating languages it's important to use code generation to achieve acceptable performance in Python. The current version of Jinja went through many different iterations to end up where it is currently. This talk walks through the design of Jinja2's compiler infrastructure and why it works the way it works and how one can use newer Python features for better results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/2012/schedule/presentation/196/"&gt;Mailman 3 -- PyCon US 2012&lt;/a&gt; - Mailman 3 has been in development for several years. This is an evolution of the ever popular mailing list management system that runs thousands of mailing lists around the world. This talk describes how the code has been modernized and how the architectural deficiencies of Mailman 2 have been addressed using REST and other technologies. This is a spinoff from the AOSA chapter on Mailman 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wiki.opencog.org/w/RelEx"&gt;RelEx Dependency Relationship Extractor - OpenCog&lt;/a&gt; - RelEx, a narrow-AI component of OpenCog, is an English-language semantic dependency relationship extractor, built on the Carnegie-Mellon Link Grammar parser. It uses a series of graph rewriting rules to identify subject, object, indirect object and many other syntactic dependency relationships between words in a sentence. That is, it generates the dependency trees of a dependency grammar. Its set of dependency relations it employs resemble those of Dekang Lin's MiniPar and the Stanford parser (and it has an explicit compatibility mode). It is inspired in part by the ideas of Hudson's Word Grammar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://notes.pinboard.in/u%3Ammc/236478884c5e2422513d"&gt;Could you start a blog on this thing?&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://vr-zone.com/articles/chinese-high-end-cpus-are-now-in-the-game--details--part-2-alpha/14347.html"&gt;Chinese high end CPUs are now in the game - details: Part 2, Alpha by VR-Zone.com&lt;/a&gt; - Chinese supercomputer uses Alpha architecture. Article has some interesting details and some cringeworthy breathless praise for the lamented Alpha chips…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>AI</category><category>DSL</category><category>FUSE</category><category>REST</category><category>alpha</category><category>analysis</category><category>blog</category><category>china</category><category>code</category><category>code-generation</category><category>computer-architecture</category><category>data</category><category>database</category><category>email</category><category>filesystem</category><category>gcc</category><category>graph</category><category>graph-processing</category><category>jinja</category><category>linkgrammar</category><category>links</category><category>mailman</category><category>matplotlib</category><category>network</category><category>nlp</category><category>opencog</category><category>parsing</category><category>pinboard-links</category><category>pycon2012</category><category>python</category><category>python3</category><category>science</category><category>sqlalchemy</category><category>static-analysis</category><category>sunway</category><category>talk</category><category>templating</category><category>text</category><category>time-series</category><category>visualization</category><guid>http://michael-mccracken.net/2012/01/links-for-december-28th-29th-including-pycon2012-talks-of-interest.html</guid><pubDate>Tue, 03 Jan 2012 19:21:00 GMT</pubDate></item><item><title>Links for August 22nd</title><link>http://michael-mccracken.net/2011/09/links-for-august-22nd.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for August 22nd:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.infoq.com/news/2011/08/UnQL"&gt;InfoQ: Interview: Richard Hipp on UnQL, a New Query Language for Document Databases&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://design.canonical.com/2011/08/thunderbird-evolution-usability-testing/"&gt;Thunderbird &amp;amp; Evolution Usability Testing « Canonical Design&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>email</category><category>links</category><guid>http://michael-mccracken.net/2011/09/links-for-august-22nd.html</guid><pubDate>Thu, 08 Sep 2011 17:56:00 GMT</pubDate></item><item><title>Links for July 6th</title><link>http://michael-mccracken.net/2011/07/links-for-july-6th.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for July 6th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nature.com/news/2010/101013/full/467775a.html"&gt;Computational science: ...Error : Nature News&lt;/a&gt; - "…why scientific programming does not compute."&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I too have worked with large codebases from non-programmers. It can be difficult to tell a brilliant physicist that programming well is hard. After QED, nothing seems hard.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://attachments.me/"&gt;Attachments.me&lt;/a&gt; - A nice interface to searching your email, with a focus on attachments. But they're not a hosting provider , so it is not immediately clear what's stopping your email provider (say gmail) from adding this and wiping out the business?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://waffle.wootest.net/2011/07/06/perturbingly/"&gt;waffle -&amp;gt; Perturbingly&lt;/a&gt; - Jesper reading the tea leaves on Growl dropping features to get into the mac app store.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>email</category><category>links</category><category>organization</category><category>pinboard-links</category><category>programming</category><category>research</category><category>science</category><category>search</category><guid>http://michael-mccracken.net/2011/07/links-for-july-6th.html</guid><pubDate>Thu, 07 Jul 2011 17:28:00 GMT</pubDate></item><item><title>Links for June 30th through July 1st</title><link>http://michael-mccracken.net/2011/07/links-for-june-30th-through-july-1st.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for June 30th to July 1st:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ios.wordpress.org/"&gt;WordPress for iOS&lt;/a&gt; - I didn't know this existed. Looks pretty nice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://twitter.com/#!/hotdogsladies/status/86535776535449601"&gt;@hotdogsladies on the email charter idea&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.wordyard.com/2011/06/30/circles-facebooks-reality-failure-is-googles-opportunity/"&gt;Circles: Facebook's reality failure is Google+'s opportunity&lt;/a&gt; - He likes the ability to group people differently, something Facebook sort of has, but never made easy. I like the idea too, but I think they could go further - sometimes you might want the type of relationship you have to be public. I'm not on G+, so I don't know if that's possible. Can you make circle names public sometimes?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pogue.blogs.nytimes.com/2011/06/30/we-have-to-fix-e-mail/"&gt;We Have to Fix E-Mail - NYTimes.com&lt;/a&gt; - Pogue likes the email charter. He adds a few good ideas that seem like common sense to me. Like Chuq said, isn't this just netiquette?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://americanmccarver.com/tagged/hockey/rss"&gt;American McCarver&lt;/a&gt; - Hockey-only RSS feed for the new sports weblog:  (sorry, @gruber)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>circles</category><category>email</category><category>email-charter</category><category>facebook</category><category>googleplus</category><category>hockey</category><category>iphone</category><category>links</category><category>netiquette</category><category>pinboard-links</category><category>socialnetworks</category><category>sports</category><category>wordpress</category><guid>http://michael-mccracken.net/2011/07/links-for-june-30th-through-july-1st.html</guid><pubDate>Fri, 01 Jul 2011 16:53:00 GMT</pubDate></item><item><title>Links for June 29th through June 30th</title><link>http://michael-mccracken.net/2011/07/links-for-june-29th-through-june-30th.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for June 29th through June 30th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://daringfireball.net/2007/07/simple_inbox_sweeper"&gt;Daring Fireball: Simple Inbox Archiving Script for Apple Mail&lt;/a&gt; - From 2007, John Gruber's archiving applescript keeps his inbox clear of read, nonflagged items. (Apparently broken in Lion.)
Sounds like this is manually invoked though. (update: &lt;a href="http://twitter.com/#!/gruber/status/86484584778313728"&gt;it is.&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.wordyard.com/2011/06/20/time-to-bake-smart-correction-tools-into-news-platforms/"&gt;Time to bake smart correction tools into news platforms — Scott Rosenberg's Wordyard&lt;/a&gt; - Scott Rosenberg on how news CMSs need to include public-viewable change-tracking. One of those things that seems obvious for a programmer…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>apple-mail</category><category>applescript</category><category>change-tracking</category><category>cms</category><category>email</category><category>journalism</category><category>links</category><category>mikechecksmail</category><category>pinboard-links</category><guid>http://michael-mccracken.net/2011/07/links-for-june-29th-through-june-30th.html</guid><pubDate>Fri, 01 Jul 2011 16:18:00 GMT</pubDate></item><item><title>Email Workflow</title><link>http://michael-mccracken.net/2011/06/email-workflow.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;Last week, Chuq van Rospach had a tear of great posts about email and online communication in general. I already linked to his first two, about the value (and certain doom) of an email charter &lt;a href="http://michael-mccracken.net/2011/06/email-charters-lists-as-parties/"&gt;here&lt;/a&gt;. 
He then went on to discuss what he's learned about how to manage email without first trying to change other people's behavior, in two parts titled "Avoiding email bankruptcy" &lt;a href="http://www.chuqui.com/2011/06/avoiding-email-bankruptcy-part-1/"&gt;Part 1&lt;/a&gt; and &lt;a href="http://www.chuqui.com/2011/06/avoiding-email-bankruptcy-part-2/"&gt;Part 2&lt;/a&gt;. Both are well worth a full read, but I'll also summarize a bit here.&lt;/p&gt;
&lt;p&gt;His &lt;a href="http://www.chuqui.com/2011/06/avoiding-email-bankruptcy-part-1/"&gt;Part 1&lt;/a&gt; says in effect "email takes real time, so budget that time." His points about never catching up if you try to just fit it in during an otherwise busy day ring especially true. I'd add that any reputation benefit you get from fast turnaround is lost by being that guy who is checking email during meetings.&lt;/p&gt;
&lt;p&gt;His &lt;a href="http://www.chuqui.com/2011/06/avoiding-email-bankruptcy-part-2/"&gt;Part 2&lt;/a&gt; goes into detail on his email workflow. I was pleased to see that my own workflow is similar - I don't get nearly as much mail as he does (sending 225 and reading 400 messages a day? Ouch), so it's nice to see that my approach could scale.&lt;/p&gt;
&lt;p&gt;The high points we have in common are &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separate work and home email accounts. &lt;em&gt;Very important&lt;/em&gt;. I couldn't agree more, and people who want unified inboxes in a mail client baffle me.&lt;/li&gt;
&lt;li&gt;try to decide what to do with an email the first time you read it, then archive it right away&lt;/li&gt;
&lt;li&gt;no filing, just one big Archive.&lt;/li&gt;
&lt;li&gt;filter lists out of the inbox ( I only do this for high-traffic lists, but my idea of "high" is not that high. )&lt;/li&gt;
&lt;li&gt;simple filtering - I don't try to use filters to pick out "important" emails - my goal is to read every mail. If I can't, I need to reduce the incoming flow, not tweak my mail client setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One difference is that he says he uses his inbox as a to-do list, where I prefer to move things to OmniFocus as soon as I understand what the task is. But it's possible we're just calling the same thing by different names.&lt;/p&gt;
&lt;p&gt;He also does more manual management of his archive folder than I do - but maybe this is because there are less than 10,000 emails in there right now. I imagine his archives are bigger. Mail.app doesn't have much trouble with mine. &lt;/p&gt;
&lt;p&gt;Also my archive is a local folder - so it never has to sync with IMAP. This is due to a server mailbox size limit, and it's not ideal. It'd be nice if I could see my archive on my phone, but hey, it's only 2011.&lt;/p&gt;</description><category>email</category><guid>http://michael-mccracken.net/2011/06/email-workflow.html</guid><pubDate>Thu, 30 Jun 2011 00:06:00 GMT</pubDate></item><item><title>Links for June 29th</title><link>http://michael-mccracken.net/2011/06/links-for-june-29th.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for June 29th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www3.postbox-inc.com/?/blog/entry/postbox_2_5_now_available/"&gt;Postbox 2.5 Now Available! -- Postbox&lt;/a&gt; - Why is 64-bit support the first bullet point?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.chuqui.com/2011/06/avoiding-email-bankruptcy-part-1/"&gt;Avoiding email bankruptcy (part 1) - Chuqui 3.0&lt;/a&gt; - Part 1 of 2: learn to recognize that email takes time and block out time to deal with it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.chuqui.com/2011/06/avoiding-email-bankruptcy-part-2/"&gt;Avoiding email bankruptcy (part 2) - Chuqui 3.0&lt;/a&gt; - Part 2: Chuq explains his email workflow. Nice and sane, very similar to what I do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>email</category><category>email-client</category><category>pinboard-links</category><category>postbox</category><category>time-management</category><guid>http://michael-mccracken.net/2011/06/links-for-june-29th.html</guid><pubDate>Wed, 29 Jun 2011 23:41:00 GMT</pubDate></item><item><title>Email Charters &amp; Lists as Parties</title><link>http://michael-mccracken.net/2011/06/email-charters-lists-as-parties.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;Chuq van Rospach shares some insight on the long battle to make email work better socially: In &lt;a href="http://www.chuqui.com/2011/06/help-create-an-email-charter-part-1/"&gt;part one&lt;/a&gt;, he argues that any attempt to codify good behavior will fail to create utopia, but may influence future tools and enough people to be worth trying. In  &lt;a href="http://www.chuqui.com/2011/06/help-create-an-email-charter-part-2/"&gt;part two&lt;/a&gt;, he says the only real way to fix problems in email is with tools, not by trying to influence behavior, if only because there are too many people using email for any lasting consensus on how to use it.&lt;/p&gt;
&lt;p&gt;In the comments to Chuq's post, there's a link to a really interesting proposal to make mailing lists easier to use - &lt;a href="http://tieguy.org/blog/2010/03/17/lists-parties/"&gt;Luis Villa: "Mailing lists are parties. Or the should be."&lt;/a&gt; The idea here is that the tools should help us give and receive some of the social cues that make parties successful where mailing lists aren't, like politely showing someone that they're boring or annoying you (by leaving the conversation), or quickly finding the interesting conversations (by seeing who and how many people are paying attention to it).&lt;/p&gt;
&lt;p&gt;I really like Luis' suggestions, because you could do this with mailing list software today.&lt;/p&gt;</description><category>email</category><guid>http://michael-mccracken.net/2011/06/email-charters-lists-as-parties.html</guid><pubDate>Wed, 22 Jun 2011 06:01:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>michael-mccracken.net (emacs)</title><link>http://michael-mccracken.net/</link><description></description><atom:link rel="self" href="http://michael-mccracken.net/categories/emacs.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 06 Oct 2016 21:02:29 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Links for January 11th</title><link>http://michael-mccracken.net/2012/01/links-for-january-11th-2/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for January 11th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://tromey.com/elpa/"&gt;Welcome to ELPA&lt;/a&gt; - emacs lisp package archive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://queue.acm.org/detail.cfm?id=2038036"&gt;OCaml for the Masses - ACM Queue&lt;/a&gt; - Why the next language you learn should be functional&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;by Yaron Minsky, Jane Street&lt;/p&gt;
&lt;p&gt;Sometimes, the elegant implementation is a function. Not a method. Not a class. Not a framework. Just a function. - John Carmack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.michaeleisen.org/blog/?p=807"&gt;Elsevier-funded NY Congresswoman Carolyn Maloney Wants to Deny Americans Access to Taxpayer Funded Research&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://byrdandbelle.bigcartel.com/"&gt;byrd and belle&lt;/a&gt; - Nice looking sleeves with wool felt and leather&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>accessories</category><category>case</category><category>elisp</category><category>emacs</category><category>functional</category><category>google</category><category>hn</category><category>ipad</category><category>iphone</category><category>journals</category><category>kindle</category><category>laptop</category><category>links</category><category>lisp</category><category>ocaml</category><category>open-access</category><category>package-manager</category><category>personalized-search</category><category>pinboard-links</category><category>programming</category><category>publication</category><category>research</category><category>search</category><category>sleeve</category><guid>http://michael-mccracken.net/2012/01/links-for-january-11th-2/</guid><pubDate>Fri, 27 Jan 2012 19:52:00 GMT</pubDate></item><item><title>Links for January 12th through January 18th</title><link>http://michael-mccracken.net/2012/01/links-for-january-12th-through-january-18th/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for January 12th through January 18th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stevenf.com/notes/"&gt;Steven Frank: Notes: Home&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.stanford.edu/~ttinoco/cvxpy/"&gt;CVXPY documentation -- CVXPY v0.0.1 documentation&lt;/a&gt; - Optimization, uses Disciplined Convex Programming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://chplib.wordpress.com/2010/02/04/progression-supporting-optimisation-in-haskell/"&gt;Progression: Supporting Optimisation in Haskell Â« Communicating Haskell Processes&lt;/a&gt; - Tools for benchmarking haskell performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.jamesmolloy.co.uk/tutorial_html/1.-Environment%20setup.html"&gt;1.-Environment setup&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.gprolog.org/"&gt;The GNU Prolog web site&lt;/a&gt; - Free GNU Prolog - supports ISO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ciaohome.org/"&gt;The Ciao System&lt;/a&gt; - "Ciao is a general-purpose programming language which supports logic, constraint, functional, higher-order, and object-oriented programming styles. Its main design objectives are high expressive power, extensibility, safety, reliability, and efficient execution"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://marmalade-repo.org/"&gt;Marmalade: Spreadable Elisp&lt;/a&gt; - A repository for elisp packages. Uses ELPA. Didn't work when I tried it, but maybe a firewall issue?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.haskell.org/haddock/"&gt;Haddock Documentation Generator for Haskell&lt;/a&gt; - Really nice documentation generator for Haskell code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I particularly like the synopsis tab.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://caml.inria.fr/pub/ml-archives/caml-list/2002/11/64c14acb90cb14bedb2cacb73338fb15.fr.html"&gt;Archives of the Caml mailing list &amp;gt; Message from Xavier Leroy [2002]&lt;/a&gt; - From 2002:
"In summary: there is no SMP support in OCaml, and it is very very
unlikely that there will ever be.  If you're into parallelism, better
investigate message-passing interfaces."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://caml.inria.fr/pub/ml-archives/caml-list/2002/04/a20d07d890dc2ebd525fbe3eed177492.en.html"&gt;Archives of the Caml mailing list &amp;gt; Message from Benjamin C. Pierce&lt;/a&gt; - Lots of links about CPS and continuations in Ocaml and others.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>caml</category><category>Cite:rentzsch</category><category>concurrency</category><category>continuations</category><category>cps</category><category>cvxpy</category><category>documentation</category><category>elisp</category><category>emacs</category><category>functional-programming</category><category>funny</category><category>haskell</category><category>Kernel</category><category>languages</category><category>links</category><category>lisp</category><category>modeling</category><category>ocaml</category><category>optimization</category><category>package-manager</category><category>parallelism</category><category>performance</category><category>pinboard-links</category><category>profiling</category><category>programming</category><category>prolog</category><category>python</category><category>sml</category><category>tools</category><guid>http://michael-mccracken.net/2012/01/links-for-january-12th-through-january-18th/</guid><pubDate>Thu, 19 Jan 2012 19:44:00 GMT</pubDate></item><item><title>Links for July 27th through July 30th</title><link>http://michael-mccracken.net/2011/08/links-for-july-27th-through-july-30th/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for July 27th through July 30th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pixelatedimage.com/blog/2011/07/45-days/"&gt;45 Days.&lt;/a&gt; - "fill the days with little things first and there won't be room for the big ones"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An hour a day = 45 days a year. The kind of thing you just need to keep re-hearing every so often.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.unitedstatesartists.org/project/computer_chess"&gt;"Computer Chess" by Andrew Bujalski - United States Artists - Great art forms here&lt;/a&gt; - &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;So all these years later I'm trying to make a very odd movie indeed, about computer chess programmers circa 1980, and perhaps deep down it's my attempt to vicariously peek into the fantasy braniac life I ought to have pursued as a kid. It happens to be a fascinating era for the field. As computers were exploding into the public sphere, and regular folks were just getting used to seeing them in the workplace, or home, a group of geniuses at the vanguard of the technology were trying to teach it what seemed like an almost unimaginable skill--could these machines, these glorified calculators, ever conquer the human world champion in chess? Obviously a human being would have to be a genius to be the world chess champ, so if they could get a computer to do it, the computer would have to acquire a kind of genius, right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://manytricks.com/moom/"&gt;Moom * Many Tricks&lt;/a&gt; - OS X window organizer. might come in handy on a big big screen...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://absadmin.users.sonic.net/schulz/pages/page1.html"&gt;Schulz's Beethoven: Schroeder's Muse&lt;/a&gt; - An online museum exhibit of the significance of Beethoven in Charles Schulz' Peanuts. Sparky was a real fan.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bc.tech.coop/blog/060620.html"&gt;Clementson's Blog: Mac OS X for Emacs Users&lt;/a&gt; - How to make os x as emacs-keybinding friendly as possible. (maybe old, certainly my isearch plugin hasn't been tested on lion, at least by me...)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>beethoven</category><category>charles-schulz</category><category>computer-chess</category><category>emacs</category><category>inspiration</category><category>links</category><category>movie</category><category>osx</category><category>peanuts</category><category>pinboard-links</category><category>schroeder</category><category>time-management</category><guid>http://michael-mccracken.net/2011/08/links-for-july-27th-through-july-30th/</guid><pubDate>Mon, 01 Aug 2011 19:29:00 GMT</pubDate></item><item><title>Better SVN workflow in Emacs</title><link>http://michael-mccracken.net/2009/09/better-svn-workflow-in-emacs/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;I've found a way to get the 3-column window layout with vc-dir, vc-diff and vc-log I showed in my &lt;a href="http://michael-mccracken.net/wp/?p=144"&gt;previous post about SVN workflow in Emacs&lt;/a&gt; by default, without the manual setup I was complaining about. &lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Update&lt;/em&gt;: It looks like this customization only exists in Emacs 23.)&lt;/p&gt;
&lt;p&gt;The key is that vc-mode uses a standard function, &lt;code&gt;pop-to-buffer&lt;/code&gt;, to create the new window for vc-diff and vc-log. This is the function that keeps creating horizontal splits that make no sense on my widescreen display. However, it ends up calling a function called &lt;code&gt;split-window-sensibly&lt;/code&gt;, which can be customized (of course!). So, if I set the "Split Height Threshold" to nil, &lt;code&gt;split-window-sensibly&lt;/code&gt; will never split horizontally, and then the default behavior just magically does what I want. If I start with just a single vc-dir window and invoke vc-diff and vc-log, I get my three columns!&lt;/p&gt;
&lt;p&gt;To get to the right customization screen, just do &lt;code&gt;M-x customize-apropos &amp;lt;ret&amp;gt; ^Split.*Threshold&lt;/code&gt;. That'll get you the two relevant customization items. Enjoy!&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>svn</category><category>vc</category><category>workflow</category><guid>http://michael-mccracken.net/2009/09/better-svn-workflow-in-emacs/</guid><pubDate>Fri, 18 Sep 2009 19:36:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>michael-mccracken.net</title><link>http://michael-mccracken.net/</link><description>This is a weblog.</description><language>en</language><lastBuildDate>Tue, 17 Mar 2015 08:29:56 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What to do with Photos 2015</title><link>http://michael-mccracken.net/2015/02/photos-2015/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;It's 2015, and saving and making use of digital photos and videos is too hard, and doesn't seem to be getting better.
I still have printed pictures of my parents when they were younger than me, because they were in an album somewhere.
But I need to get serious with some kind of digital media strategy, or my kids might not be able to find or access any pictures of themselves as babies.&lt;/p&gt;
&lt;p&gt;We have a couple Macs, some iPhones and some cameras with SD cards. We
want to back up photos to one place, permanently prune out bad ones,
and be able to access all of them in an organized way that lets us
e.g. upload them to places to get yearly books printed.
This basically means we need the stuff in the cloud, with an easy way
to download subsets onto local disks.&lt;/p&gt;
&lt;p&gt;So, we need some kind of server-hosted solution, and there are so many
it's hard to keep track.  I looked into most of them, and read a few
summary posts, and so many of them don't quite make it easy to import
from everywhere, or they leave me uneasy that I'll have to switch
again sometime soon. Big companies abandon their products, and small
companies get acquired then abandon their products often enough that
almost any for-pay service feels temporary. Free services, or platform-tied things like iCloud, Google plus or Amazon Prime Photos also feel temporary, because they're tied to the success of that platform (and what if I decide to change phones?)&lt;/p&gt;
&lt;p&gt;Last summer, I spent a lot of time working with git-annex because I
liked the flexibility of not having to keep all the photos in one
place but still have them in one logical 'annex' with their location
being tracked - and I wanted to control the backup of the data.  I
even spent a long time on an import script that avoided dupes and
tagged photos with git-annex metadata from their GPS info.  The neat
database-like "view" features built around metadata turned out to be
unusably slow with &amp;gt;1K files, though, and so I was looking at more
work trying to help fix that, along with still needing to figure out
what to do with the iPhones, and it just seemed like too much effort.&lt;/p&gt;
&lt;p&gt;So, I looked back at reviews of hosted sites (I thought it was from sweethome.com, but I can't find it there anymore),
and saw that &lt;a href="http://www.picturelife.com"&gt;Picturelife&lt;/a&gt; 
allows you to use your own bucket on Amazon S3 for photo storage -
then you get the Picturelife features for free and only pay Amazon for
storage. So if Picturelife dies for some reason, your bucket still has
your photos. I thought that sounded pretty good, so I've been trying
it out for a while. I like their import features - there's a mac app
that I used for the initial bulk upload and ongoing for emptying the
SD cards, and the iPhone apps work as well as apps can be expected to
(background uploading seems to not work or not be implemented).&lt;/p&gt;
&lt;p&gt;I have some UI nits to pick, but overall it is good - lets me look
through pictures (I haven't bothered with the editing UI yet), and
hide or delete bad ones, tag and write captions. All good so
far. There's a map view that's interesting but has equally interesting
bugs - I reported one where photos from Portland, OR were sometimes
interpreted as being in Portland, Maine for example. And it'd be nice
to be able to say "show me this picture on the map", but that
direction isn't implemented.&lt;/p&gt;
&lt;p&gt;Since I wrote the last paragraph, none of my bugs have been fixed, and Picturelife's incredible journey
&lt;a href="http://blog.picturelife.com/post/109541575280/picturelife-joins-streamnation"&gt;has been acquired&lt;/a&gt;. I'm
currently just waiting to see how that changes things - they say it'll continue as a product.
At least my photos are in my own bucket.&lt;/p&gt;
&lt;p&gt;If only there was an easy obvious choice. What do you do?&lt;/p&gt;</description><category>flickr</category><category>git</category><category>git-annex</category><category>photos</category><guid>http://michael-mccracken.net/2015/02/photos-2015/</guid><pubDate>Tue, 05 Aug 2014 16:26:17 GMT</pubDate></item><item><title>Links for June 27, 2014</title><link>http://michael-mccracken.net/2014/06/links-for-June-27-2014/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;li&gt;
&lt;p&gt;&lt;a href="http://opentuner.org/"&gt;OpenTuner by jansel&lt;/a&gt;
    "OpenTuner is a new framework for building domain-specific multi-objective program autotuners. OpenTuner supports fully customizable configuration representations, an extensible technique representation to allow for domain-specific techniques, and an easy to use interface for communicating with the tuned program. A key capability inside OpenTuner is the use of ensembles of disparate search techniques simultaneously, techniques which perform well will receive larger testing budgets and techniques which perform poorly will be disabled." -- This looks really useful. I started on something like this long ago at LLNL, but since I was so young I focused mostly on fancy plots and designing a language for describing experiments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://vimeo.com/95534178"&gt;Paper to Plants on Vimeo&lt;/a&gt;
    A really cute video about a game that seems pretty charming. I'm still not sold on little kids using iPads so much, I'm told it's bad for their eye development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.computingcomfort.org/create2.asp"&gt;Ergonomic Workspace Planner Tool | ComputingComfort.org&lt;/a&gt;
    Use this to figure out the optimal height of your standing desk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mbutterick.github.io/pollen/doc/"&gt;pollen&lt;/a&gt;
    Write web based books in racket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dealloc.me/2014/05/24/opendata-house-hunting/"&gt;Finding the perfect house using open data â€” dealloc.me&lt;/a&gt;
    A guy builds a map of available houses in Portland that match his desires. Seems like a good real estate agent should do this for you - but how do you know you've got a good one? I guess you have to write some code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://billmill.org/pymag-trees/"&gt;Drawing Presentable Trees&lt;/a&gt;
    "When I needed to draw some trees for a project I was doing, I assumed that there would be a classic, easy algorithm for drawing neat trees. What I found instead was much more interesting: not only is tree layout an NP-complete problem1, but there is a long and interesting history behind tree-drawing algorithms. I will use the history of tree drawing algorithms to introduce central concepts one at a time, using each of them to build up to a complete O(n) algorithm for drawing attractive diagrams of trees." -- I've always wondered what a good way to do this would be. Knew it had to be a solved problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://againstallgrain.com/2013/10/12/grain-free-oatmeal-raisin-cookies/"&gt;Grain-Free Oatmeal Raisin Cookies | Against All Grain - Delectable paleo recipes to eat &amp;amp; feel great&lt;/a&gt;
    If you want oatmeal-raisin but you're trying to avoid oats and sugar, these are really quite good. The coconut makes a great texture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.slate.com/articles/life/family/2014/06/lev_grossman_on_his_daughter_lily_how_being_a_father_ruined_my_life_and.html"&gt;Lev Grossman on his daughter, Lily: How being a father ruined my life and made me a better writer.&lt;/a&gt;
    A really heartfelt story about becoming a dad and getting your act together. Now that I have kids I'm a total sucker for this kind of article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://hal.archives-ouvertes.fr/inria-00555588/"&gt;HAL :: [inria-00555588, version 1] A comprehensive study of Convergent and Commutative Replicated Data Types&lt;/a&gt;
    Formal exploration of sync-able data types. Abstract: "Eventual consistency aims to ensure that replicas of some mutable shared object converge without foreground synchronisation. Previous approaches to eventual consistency are ad-hoc and error-prone. We study a principled approach: to base the design of shared data types on some simple formal conditions that are sufficient to guarantee eventual consistency. We call these types Convergent or Commutative Replicated Data Types (CRDTs). This paper formalises asynchronous object replication, either state based or operation based, and provides a sufficient condition appropriate for each case. It describes several useful CRDTs, including container data types supporting both \add and \remove operations with clean semantics, and more complex types such as graphs, montonic DAGs, and sequences. It discusses some properties needed to implement non-trivial CRDTs."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dev.stephendiehl.com/hask/#intro"&gt;What I Wish I Knew When Learning Haskell 2.1 ( Stephen Diehl )&lt;/a&gt;
    Nice quick article with practical tips for beginners.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.psmag.com/navigation/business-economics/talent-migration-work-creative-much-new-york-poor-pittsburgh-rich-82894/"&gt;Not So Much 'New York Poor' as 'Pittsburgh Rich' - Pacific Standard: The Science of Society&lt;/a&gt;
    You can get a lot for your money in Pittsburgh, and lots of other places throughout the US. I'm from Pgh, and have fond memories. I'd consider moving back there if they could fix the weather.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://aphyr.com/posts/317-call-me-maybe-elasticsearch"&gt;Call me maybe: Elasticsearch&lt;/a&gt;
    Part of a series of irreverent but thorough explorations of various popular distributed systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://m.theatlantic.com/technology/archive/2014/05/what-do-we-save-when-we-save-the-internet/370885/"&gt;What Do We Save When We Save the Internet&lt;/a&gt;
    So as you proceed with your protests, I wonder if you might also ask, quietly, to yourself even, what new growth might erupt if we let the Internet as we know it burn. Shouldn't we at least ponder the question? Perhaps weâ€™d be better off tolerating the venial regret of having lost something than suffering the mortal regret of enduring it."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.musanim.com/"&gt;Music Animation Machine â€” "Music Worth Watching"&lt;/a&gt;
    Old stuff, but great. Couldn't believe I hadn't bookmarked it long ago.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://serialized.net/2013/03/moving-from-octopress-to-nikola/"&gt;Moving from Octopress to Nikola | serialized.net&lt;/a&gt;
    This post and a few tweaks got me into nikola without much hassle.&lt;/p&gt;
&lt;/li&gt;
</description><category>CRDT</category><category>acheme</category><category>algorithms</category><category>analysis</category><category>app</category><category>art</category><category>autotuning</category><category>blogging</category><category>calculator</category><category>constraints</category><category>cookie</category><category>criticism</category><category>culture</category><category>data</category><category>data-structures</category><category>diagram</category><category>ergonomics</category><category>estate</category><category>eventual-consistency</category><category>fatherhood</category><category>finance</category><category>gluten-free</category><category>graphics</category><category>growing</category><category>haskell</category><category>housing</category><category>howto</category><category>internet</category><category>kids</category><category>language</category><category>maps</category><category>merging</category><category>music</category><category>nikola</category><category>oatmeal</category><category>octopress</category><category>optimization</category><category>paleo</category><category>parenting</category><category>performance</category><category>pittsburgh</category><category>plants</category><category>programming</category><category>publishing</category><category>quickref</category><category>racket</category><category>real</category><category>recipe</category><category>reference</category><category>research</category><category>solver</category><category>sync</category><category>tree</category><category>tuning</category><category>typesetting</category><category>up</category><category>video</category><category>visualization</category><category>workstation</category><category>writing</category><guid>http://michael-mccracken.net/2014/06/links-for-June-27-2014/</guid><pubDate>Fri, 27 Jun 2014 19:24:00 GMT</pubDate></item><item><title>Flashing a Nexus device with Ubuntu Touch from Mac OS X</title><link>http://michael-mccracken.net/2013/09/flashing-ubuntu-touch-from-osx/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;I've been working with Ubuntu Touch recently, using VirtualBox to run
Ubuntu Saucy as a guest on my Mac, and while it does work to connect
to the device once it's installed, the process of reflashing is
difficult. The manual steps on the Ubuntu Wiki
&lt;a href="https://wiki.ubuntu.com/Touch/Install"&gt;Touch/Install&lt;/a&gt; page work for
the old way, via &lt;code&gt;phablet-flash cdimage-touch&lt;/code&gt;, with the caveat that
you may have to manually reboot the device and/or re-connect the USB
in between steps.&lt;/p&gt;
&lt;p&gt;However, as of &lt;a href="https://lists.launchpad.net/ubuntu-phone/msg04004.html"&gt;this email last week&lt;/a&gt;, the official way
to flash phones is using the system images via &lt;code&gt;phablet-flash
ubuntu-system&lt;/code&gt;, which has a different set of files.&lt;/p&gt;
&lt;p&gt;Instead of just muddling through and updating the manual instructions,
I decided to see if phablet-flash would run natively on the Mac. After
a bit of python dependency resolution, it does. Here's what I did:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="http://developer.android.com/sdk/index.html"&gt;Android SDK tools&lt;/a&gt;. You only really need the "SDK Tools", not the whole ADT Bundle, so I clicked on "Use an existing IDE" at the bottom of that page, to get the smaller installer.&lt;/li&gt;
&lt;li&gt;Unpack the archive and run ./android. Install the platform-tools (and nothing else).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the platform-tools/ directory to your $PATH for convenience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) create a virtualenv for the python dependencies, and activate it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt; each of &lt;code&gt;configobj&lt;/code&gt; &lt;code&gt;pyxdg&lt;/code&gt;, and &lt;code&gt;pyliblzma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;get &lt;a href="http://bazaar.canonical.com/"&gt;bazaar&lt;/a&gt; if you don't already have it.&lt;/li&gt;
&lt;li&gt;branch phablet-tools: &lt;code&gt;bzr branch lp:phablet-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd phablet-tools &amp;amp;&amp;amp; python setup.py build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;At this point, &lt;code&gt;phablet-flash ubuntu-system&lt;/code&gt; should work smoothly, with all transfers and reboots and timeouts going as expected.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The only minor hiccup is that it apparently doesn't get ~/Downloads/
from pyxdg, but it just means that you'll get the images saved to
~/phablet-flash instead of ~/Downloads/phablet-flash. No big deal.&lt;/p&gt;</description><category>nexus</category><category>ubuntu</category><category>ubuntutouch</category><guid>http://michael-mccracken.net/2013/09/flashing-ubuntu-touch-from-osx/</guid><pubDate>Thu, 12 Sep 2013 17:40:00 GMT</pubDate></item><item><title>Links: Simulation, Programming, Crab Cakes and Hockey Player Usage Charts</title><link>http://michael-mccracken.net/2013/04/links/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;li&gt;&lt;a href="http://lambda-the-ultimate.org/node/4710"&gt;DYNAMO&lt;/a&gt;
    Someone has rewritten one of the earliest simulation systems in JavaScript (the fate of all interesting software). Also includes a link to an article about the history of simulation software that sounds very interesting.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.seriouseats.com/~r/seriouseatsfeaturesvideos/~3/yfScRT6TNzw/the-food-lab-crab-cakes.html"&gt;The Food Lab: The Crabbiest Crab Cakes&lt;/a&gt;
    I love crab cakes, but I'm not sure I really want to try to make them at home. If I do, I'll use these tips. The Food Lab is fun stuff.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mjtsai.com/blog/2013/03/30/debug-it/"&gt;Debug It!&lt;/a&gt;
    A review of a book on debugging, which is a topic that I think should be taught right alongside programming. See also &lt;a href="http://whyprogramsfail.com"&gt;"Why Programs Fail"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.givedirectly.org/"&gt;GiveDirectly: introducing a radical new way to give! | GiveDirectly&lt;/a&gt;
    Send cash straight to poor people. If their assertions are true, it's a really interesting idea, and I can't believe it hasn't been done before. It also seems transparently better than microloans.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ContinuumIO/Bokeh"&gt;ContinuumIO/Bokeh Â· GitHub&lt;/a&gt;
    Something to look out for -- a Python ggplot that works with HTML5 is a great idea. "Bokeh (pronounced boh-Kay) is an implementation of Grammar of Graphics for Python, that also supports the customized rendering flexibility of Protovis and d3. Although it is a Python library, its primary output backend is HTML5 Canvas.  There are many excellent plotting packages for Python, but they generally do not optimize for the particular needs of statistical plotting (easy faceting, bulk application of aesthetic and visual parameters across categorical variables, pleasing default color palettes for categorical data, etc.). The goal of Bokeh is to provide a compelling Python equivalent of ggplot in R."&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kk.org/cooltools/archives/10441"&gt;FitDesk X1&lt;/a&gt;
    Level up from a standing desk? I'd love to try this for a day.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lambda-the-ultimate.org/node/4699"&gt;Concurrent Revisions&lt;/a&gt;
    DVCS-like concurrent programming. Interesting sounding research - I haven't read it yet...&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hockeyabstract.com/playerusagecharts"&gt;Many thanks to @robvollmannhl and the good folks at Hockey Abstract for these great interactive Player Usage Charts: hockeyabstract.com/playerusagechaâ€¦&lt;/a&gt;
    Player Usage Charts are fascinating, but I can never figure out why people always change the axes so that the dots fill the space. It makes it impossible to compare two charts, and it's not obvious, so you end up comparing charts without realizing that it's meaningless.&lt;/li&gt;
</description><category>Debugging</category><category>Recipe books</category><category>charity</category><category>crab-cake</category><category>data-analysis</category><category>giving</category><category>plotting</category><category>programming</category><category>python</category><category>recipe</category><category>research</category><guid>http://michael-mccracken.net/2013/04/links/</guid><pubDate>Wed, 10 Apr 2013 15:41:00 GMT</pubDate></item><item><title>Mock nested properties with python-mock</title><link>http://michael-mccracken.net/2013/02/mock-nested-properties-with-python-mock/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;Python's &lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;mock&lt;/a&gt; library (part of stdlib in 3.3+) is a great tool for writing concise tests.
Its documentation is very good, and rewards multiple reads - but I found one thing that wasn't totally clear, even after looking through a few times.
I wanted to use PropertyMock to mock nested Properties. Specifically, I had patched the python Gnome-introspection wrapper for libsoup at the top level &lt;code&gt;Soup&lt;/code&gt; objcet, and I also wanted to replace one of its nested constant properties, Soup.MemoryUse.COPY with a sentinel that I controlled, for later comparison. &lt;/p&gt;
&lt;p&gt;The idiom for PropertyMock is to assign a PropertyMock to the type object of the Mock object whose property you want control of.
What I found is that because Mocks auto-create properties, it's possible to do nested mocking in one line, like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sentinel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sentinel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;So my soup example looks roughly like this (mixing testing and tested code, and repeating literals for brevity):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;json_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"{}"&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_soup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gi.repository&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MemoryUse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sentinel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# tested code:&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"http://fake.com/api"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MemoryUse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# checking:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"http://fake.com/api"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                                    &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                                                        &lt;span class="n"&gt;sentinel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;--- this was the point&lt;/span&gt;
                                                                        &lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;It's often possible to think of a shorter, clearer use of the mock library after revisiting a problem, but so far this still seems good. Let me know in the comments if you have a suggestion for improvements.&lt;/p&gt;</description><guid>http://michael-mccracken.net/2013/02/mock-nested-properties-with-python-mock/</guid><pubDate>Thu, 21 Feb 2013 23:05:00 GMT</pubDate></item><item><title>Don't Snooze</title><link>http://michael-mccracken.net/2013/02/dont-snooze/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;Mailbox is a new iPhone email app that grabbed a lot of attention recently, partly because of their waiting list for using it.
It's a gmail-only system that stores copies of your email on Mailbox's servers, so they can do new features beyond the standard mail client.
Even though I got through the waiting list a week ago, I haven't tried it myself, because I wasn't &lt;/p&gt;
&lt;p&gt;I have a few religious beliefs about email.
One is that processing incoming email is different from &lt;/p&gt;
&lt;p&gt;that you should only process a message once - when you first see it, you should decide what to do next with it, even if that's "read it again later", &lt;/p&gt;
&lt;p&gt;I call it a religion because I believe it, but I don't always practice
it. I have an inbox full of things I've looked at once and am
procrastinating on, partly because it's hard to move things to the
todo list that I use from Gmail. It annoys me every time I look at my
email, and I've forgotten important things that I left sitting
there. This is exactly why I think it's important that our tools
encourage good habits, instead of encoding bad ones.&lt;/p&gt;</description><guid>http://michael-mccracken.net/2013/02/dont-snooze/</guid><pubDate>Fri, 08 Feb 2013 16:18:00 GMT</pubDate></item><item><title>Mac IRC clients</title><link>http://michael-mccracken.net/2012/12/mac-irc-clients/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;At Canonical, we are spread all over and keep in touch via IRC. I've
tried out a bunch of IRC clients, but nothing is quite right. I'll
explain. Here's a list of some things I want from a client - it's
probably not complete, but it'll do for now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Don't crash. A bouncer makes crashes recoverable, but I shouldn't
 have to use one just to keep the backlog around.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I need to search the backlog. Incremental search is best.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show multiple channels at once, in one window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Highlight mentions of my nick so I can glance at a window and see if anyone's asking me something. Use Growl or notification center, too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it obvious when I've disconnected, and reconnect robustly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let me hide/fade out join/leave notifications and other admin messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep my place so I know what messages are new.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it obvious which channel I'm looking at, and even more
 obvious which channel I'm about to type in. (Nothing is great at this)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spell-check is nice, but autocorrect is awful for IRC and
 technical discussions. Needs a global switch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't show unread counts. Some channels are chatty and I'm just in them listening for my name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the clients I've tried and why they aren't quite perfect:&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://colloquy.info"&gt;Colloquy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Colloquy is a nice full-featured open source client. I've used it the
most. However - it doesn't show multiple channels in one window at the
same time, and doesn't keep your place. I've had some problems with
reconnection, where I thought IRC was quiet when I was actually just
disconnected and didn't know it.&lt;/p&gt;
&lt;p&gt;I have to turn autocorrect off for each room I'm in, which I only
remember after the first time it really annoys me by mangling some
jargon.&lt;/p&gt;
&lt;p&gt;There's also some general buggy behavior, and I have a short list of
bugs I'd like to report someday, but I don't have time to fix them.&lt;/p&gt;
&lt;p&gt;Years ago I hacked my own version of a place marker that I liked, but
I can't remember why it didn't make it in, and of course the code is
lost now.&lt;/p&gt;
&lt;p&gt;The backlog search looks like it should be powerful, but in my
experience it just doesn't work - it never displays any results. I'm
not sure what the deal is there.&lt;/p&gt;
&lt;p&gt;(As a side note, Colloquy's iPhone app is the only iPhone IRC client
I've used. It seems to work fine, and I don't use it enough to have
specific gripes. Just having to have IRC open on my phone is
guaranteed to annoy me more than the software itself could.)&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.emacswiki.org/ERC"&gt;Emacs ERC&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My current setup is just to run ERC in an emacs window alongside my
code editing.  This has super flexible window splitting and size
management and unbeatable search for your backlog, since it's just
another emacs buffer. There's another nice benefit - if you're writing
about code, emacs' tab-completion for strings across all buffers means
that you can easily autocomplete SomeReallyLongFunctionName in
chats. This saves a lot of typing and cut n' pasting. When you do need
to cut n' paste, it's nicer to do it between emacs buffers than
between apps.&lt;/p&gt;
&lt;p&gt;The defaults are not ideal, as usual with emacs you need to dig around
to find a good setup.&lt;/p&gt;
&lt;p&gt;There's a module to colorize nicknames according to a hash of the
name, so it's easier to tell people apart. Other clients have similar
features but I think I like emacs' the best for some reason - maybe
the palette is nicer.&lt;/p&gt;
&lt;p&gt;There's a module to mark your place that only works if you left the
cursor in the backlog, which is a little weird. It will highlight my
nick when mentioned, but not the whole line.&lt;/p&gt;
&lt;p&gt;Since it's open source, I have the same problem as Colloquy, it's
hackable, but I don't really have time for that. And emacs is fun to
hack on, so it's a potentially dangerous time sink.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://conceitedsoftware.com/products/linkinus"&gt;Linkinus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a nice client with some minor flaws and a little flakiness. I
liked it but moved on because of minor annoyances.&lt;/p&gt;
&lt;p&gt;It has a kind-of nifty "conversation tracking" feature that tries to
highlight messages in a back-and-forth when you hover over it with the
mouse (but only in the currently selected channel). It's not really
that useful, but I think it could be if pushed further. I'd like to
see more clients try this kind of thing, since separating multiple
concurrent conversations is hard on IRC, and it can be hard to avoid
them.&lt;/p&gt;
&lt;p&gt;Lets you display multiple channels in one window, but that needs some
improvement. There's just one text-entry field so it's easy to type
something to the wrong channel. &lt;/p&gt;
&lt;p&gt;The split display has some issues. The split channel views don't show
you the channel name anywhere, and in some cases don't even show you
the channel topic, which may or may not be helpful anyway. So it can
take some effort to figure out what channel you're looking at,
especially if there are many of the same people talking on two
channels.&lt;/p&gt;
&lt;p&gt;It can save a set of channels as a group, but it doesn't save the
relative sizes of the splits in the group, so if you want to flip
between groups, you'd better be OK with even splits.&lt;/p&gt;
&lt;p&gt;Finally, it only supports vertical splits, so with more than two
channels, you just get a couple unreadably long lines per channel.&lt;/p&gt;
&lt;p&gt;It has a very barebones backlog search, but it does work.&lt;/p&gt;
&lt;p&gt;They've also clearly tried to re-design the account setup / prefs
experience, but I'm not a big fan of an inspector palette - I wanted
to compare settings between two servers and it will only show me one
at a time. This was also the biggest point of flakiness, where some
edits wouldn't commit and I couldn't tell if the settings were being
changed.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.codeux.com/textual/"&gt;Textual&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Textual is an open-source app
&lt;a href="http://github.com/Codeux/Textual"&gt;(github.com/Codeux/Textual)&lt;/a&gt; that
is for sale on the Mac app store. This is an interesting approach that
I think has some merit - people may still contribute code or bug
fixes, but it's also nice to know that if the app ever gets abandoned,
it could be resurrected. That said, I tried building from source to
enable a quick hack once but the master branch didn't build for me, so
they're not trying to make it easy.&lt;/p&gt;
&lt;p&gt;It lets me hide some admin messages, has automatic &amp;amp;
manual scrollback markers to keep track of what I've missed.&lt;/p&gt;
&lt;p&gt;This has a setting to "Track conversations using nickname
highlighting" but I couldn't really tell what it was doing.&lt;/p&gt;
&lt;p&gt;This also has a pretty barebones search, but again, it works.&lt;/p&gt;
&lt;p&gt;I tried this for a few days and liked it, but ultimately switched
away, I think mostly because you can't display multiple channels -
there's just one window and it doesn't split up.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://mediaware.sk/ware/?page_id=35"&gt;Mango&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I haven't tried Mango. The screenshots in the App Store and feature
listings don't lead me to believe that it's anything significantly
different from the others. I'd be glad to hear from fans, though.&lt;/p&gt;
&lt;p&gt;So, what do you use? Have I missed anything great?&lt;/p&gt;</description><category>apps</category><category>irc</category><category>mac</category><category>review</category><guid>http://michael-mccracken.net/2012/12/mac-irc-clients/</guid><pubDate>Thu, 13 Dec 2012 17:03:00 GMT</pubDate></item><item><title>More out of date links</title><link>http://michael-mccracken.net/2012/10/selected-links/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;li&gt;&lt;a href="http://hammerprinciple.com/therighttool"&gt;Programming Languages Â· Hammer Principle&lt;/a&gt;
    Very interesting survey site to answer the question "what language is right for what task?"&lt;/li&gt;
&lt;li&gt;&lt;a href="http://james-iry.blogspot.co.uk/2010/05/types-la-chart.html"&gt;One Div Zero: Types Ã  la Chart&lt;/a&gt;
    A chart of languages according to type power/safety. Seems reasonable. Made me curious about the ones in the top right. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/philsquared/Catch/wiki"&gt;Home Â· philsquared/Catch Wiki&lt;/a&gt;
    C++ unit testing framework, all in headers, looks nice.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ferd.ca/an-open-letter-to-the-erlang-beginner-or-onlooker.html"&gt;ferd.ca -&amp;gt; An Open Letter to the Erlang Beginner (or Onlooker)&lt;/a&gt;
    Interesting, balanced article about what makes erlang nice. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://worrydream.com/oatmeal/blind.html"&gt;"Research is a blind date with knowledge." worrydream.com/oatmeal/blind.â€¦&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mail.python.org/pipermail/pypy-dev/2012-October/010602.html"&gt;Splitting RPython (the language) and PyPy (a python interpreter) plan: mail.python.org/pipermail/pypyâ€¦&lt;/a&gt;
    Sounds interesting. I wonder if RPython will grow in popularity separately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://saltandfat.com/post/33437971658"&gt;Double-corn tortillas&lt;/a&gt;
    I'd love to try this sometime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clips/pattern"&gt;clips/pattern Â· GitHub&lt;/a&gt;
    Web-mining in python. Lots of functionality here, BSD license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.brainpickings.org/index.php/2012/06/12/the-art-of-coffee-1961/"&gt;The Art of Coffee: A Mad Men Era Short Film | Brain Pickings&lt;/a&gt;
    I loved "This is Coffee!". 12 minute promotional short film from 1961 about coffee. It's wonderful to imagine the worn old mugs of my grandparents' generation new again, filled with something better than the electric-percolated canned junk I know they drank. Also great to see the Chemex in there, exactly the same as I use it today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/LearnableProgramming/"&gt;Learnable Programming&lt;/a&gt;
    Very clear and well-argued essay about how to make a more-understandable programming environment. I agreed with everything, and was left wondering how to apply this line of thought to more complex software. (Everyone has seen this by the time I post this list.)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robrohan.com/2009/09/14/objc-signaturevo/"&gt;@objc.signature(â€˜v@:@@o^@â€™) | Times New Rohan&lt;/a&gt;
    List of objc.signature codes &lt;/li&gt;
</description><category>1961</category><category>c-plus-plus</category><category>coffee</category><category>erlang</category><category>film</category><category>javascript</category><category>languages</category><category>learning</category><category>objc signature</category><category>patterns</category><category>programming</category><category>programming-languages</category><category>recipe</category><category>software</category><category>teaching</category><category>testing</category><category>tortilla</category><category>types</category><guid>http://michael-mccracken.net/2012/10/selected-links/</guid><pubDate>Thu, 25 Oct 2012 19:35:00 GMT</pubDate></item><item><title>Links</title><link>http://michael-mccracken.net/2012/10/links/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10857030/whats-so-bad-about-template-haskell"&gt;What's so bad about Template Haskell? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A bunch of good answers to why Template Haskell is occasionally maligned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10845179/which-haskell-ghc-extensions-should-users-use-avoid/10849782#10849782"&gt;Which Haskell (GHC) extensions should users use/avoid? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting list of aesthetic judgements of haskell extensions. At press time I don't know what most of these words mean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.yesodweb.com/blog/2011/04/yesod-template-haskell"&gt;Yesod and Template Haskell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Short post on why Yesod uses template haskell (which has a bad rep)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://imakewebthings.com/deck.js/"&gt;deck.js Â» Modern HTML Presentations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best "Write your presentations in HTML" thing I've seen yet, although I'm not sure how great it'd be at complex visuals or builds. Yes sometimes builds are good! &lt;em&gt;SOMETIMES&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://redbot.org/"&gt;REDbot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RED is a robot that checks HTTP resources to see how they'll behave, pointing out common problems and suggesting improvements. Although it is not a HTTP conformance tester, it can find a number of HTTP-related issues. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/visi-lang/visi"&gt;.@dppâ€™s Visi looks to be exactly the thing when Soulver isnâ€™t enough and spreadsheets are rigid github.com/visi-lang/visi #emerginglangs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Should I look at this before posting a link? Nah... But I will look at it, eventually! It looks interesting, I love this kind of stuff - although as usual I wonder if this is something you can already get in Mathematica but no one knows because it's so expensive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://highscalability.com/blog/2012/7/30/prismatic-architecture-using-machine-learning-on-social-netw.html"&gt;High Scalability - Prismatic Architecture - Using Machine Learning on Social Networks to Figure Out What You Should Read on the WebÂ &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Probably interesting? I skimmed this, I'm not gonna lie, I don't remember much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://deslide.clusterfake.net/"&gt;Deslidefied HTML&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really useful bookmark to make slideshow news articles readable on one page. I am using it all the time!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pragprog.com/magazines/2012-09/thinking-functionally-with-haskell"&gt;Thinking Functionally with Haskell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;""In which we explore what modern type systems bring to the table. Imagine an approach to programming where you write down some description of what your code should do, then before running your code you run some automatic tool to see if the code matches the description. Thatâ€™s Test-driven development, you say!  Actually, this is what you are doing when you use static types in most languages too. Types are a description of the codeâ€™s inputs and outputs, and the check ensures that inputs and outputs match up and are used consistently. Modern type systemsâ€”such as in Haskell or aboveâ€”are very flexible, and allow these descriptions to be quite detailed; plus they are not too obtrusive in use and often very helpful.  One point Iâ€™ll investigate here is how advances in types are converging with new ideas on testing, to the point where (I claim) the old distinctions are starting to blur and starting to open up exciting new possibilitiesâ€”hence my suggestion that we need a new word to describe what weâ€™re doing that is free from preconceptions and out-dated thinking.  So put aside your bad experiences from Java, and prepare to be amazed! ""&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://feedproxy.google.com/~r/ezyang/~3/3Vb6-OhkZws/"&gt;So you want to hack on IMAPâ€¦&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;"Well, first off, youâ€™re horribly misinformed: you do not actually want to hack on IMAP." (I agree, IMAP bad.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://waxy.org/2008/06/the_machine_that_changed_the_world/"&gt;The Machine That Changed the World: Great Brains - Waxy.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Documentary about computing history:
"It's a whirlwind tour of computing before the Web, with brilliant archival footage and interviews with key players â€” several of whom passed away since the filming. Jointly produced by WGBH Boston and the BBC, it originally aired in the UK as The Dream Machine before its U.S. premiere in January 1992. Its broadcast was accompanied by a book co-written by the documentary's producer Jon Palfreman."&lt;/p&gt;
&lt;/li&gt;
</description><category>GHC extensions</category><category>dependent-types</category><category>deslide</category><category>email</category><category>functional-programming</category><category>haskell</category><category>html</category><category>imap</category><category>javascript</category><category>presentations</category><category>programming</category><category>scalability</category><category>slides</category><category>slideshow</category><category>template-haskell</category><category>testing</category><category>tools</category><category>types</category><category>webarchitecture</category><category>yesod</category><guid>http://michael-mccracken.net/2012/10/links/</guid><pubDate>Mon, 08 Oct 2012 07:47:00 GMT</pubDate></item><item><title>A Testing Story</title><link>http://michael-mccracken.net/2012/10/a-testing-story/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;Tests are great! This year I've started working on a codebase with a
significant unit test suite for the first time in a while, and good
coverage has definitely come in handy. Now I'm going to share a 
story where a single test did double duty.&lt;/p&gt;
&lt;p&gt;Our filesystem events listening daemon was crashing occasionally on my
system, and I didn't know how to reproduce it. No one else seemed to
be getting these crashes, either. The system was saving a backtrace,
and it was always the same, but I wasn't sure I believed its line
numbers. As a start, I made a guess at the lines that were really
failing, and added a ton of debug dumps to inspect the state. (Since
this daemon is run as root using launchd, it's still easiest to just
use the old printf-n'-stare debug method.)&lt;/p&gt;
&lt;p&gt;Then I tried a lot of stuff to poke at it, even leaving Spotify on
overnight in an attempt to recreate the conditions of the bug. No
luck. It seemed like it would only crash when I wasn't trying to get
it to crash - pretty frustrating.&lt;/p&gt;
&lt;p&gt;I finally found it, but only after giving up for a while. I checked in
again after working for a while on another project, and hey, lots of
new crashes! With all my extra debug info, I could see what was going
on - a string that couldn't be encoded in UTF-8 was being handled by
some code that assumed it could be. It was a filesystem path with
invalid characters.&lt;/p&gt;
&lt;p&gt;What was the path that was killing my daemon? It was a temp file written
by the test suite for the other project. It was a non-utf8 path,
written to test the unicode handling of the GUI, and it had the
wonderful (in retrospect) side effect of poking a bug in the daemon
too. It's so satisfying when you find a bug's cause and it completely explains all the symptoms you were seeing.&lt;/p&gt;
&lt;p&gt;One test exercising the unicode handling of multiple projects, now that's coverage!&lt;/p&gt;</description><category>testing</category><guid>http://michael-mccracken.net/2012/10/a-testing-story/</guid><pubDate>Wed, 03 Oct 2012 18:37:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>michael-mccracken.net (software)</title><link>http://michael-mccracken.net/</link><description></description><language>en</language><lastBuildDate>Fri, 27 Jun 2014 09:12:41 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>More out of date links</title><link>http://michael-mccracken.net/posts/2012/10/selected-links.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;li&gt;&lt;a href="http://hammerprinciple.com/therighttool"&gt;Programming Languages · Hammer Principle&lt;/a&gt;
    Very interesting survey site to answer the question "what language is right for what task?"&lt;/li&gt;
&lt;li&gt;&lt;a href="http://james-iry.blogspot.co.uk/2010/05/types-la-chart.html"&gt;One Div Zero: Types à la Chart&lt;/a&gt;
    A chart of languages according to type power/safety. Seems reasonable. Made me curious about the ones in the top right. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/philsquared/Catch/wiki"&gt;Home · philsquared/Catch Wiki&lt;/a&gt;
    C++ unit testing framework, all in headers, looks nice.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ferd.ca/an-open-letter-to-the-erlang-beginner-or-onlooker.html"&gt;ferd.ca -&amp;gt; An Open Letter to the Erlang Beginner (or Onlooker)&lt;/a&gt;
    Interesting, balanced article about what makes erlang nice. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://worrydream.com/oatmeal/blind.html"&gt;"Research is a blind date with knowledge." worrydream.com/oatmeal/blind.…&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mail.python.org/pipermail/pypy-dev/2012-October/010602.html"&gt;Splitting RPython (the language) and PyPy (a python interpreter) plan: mail.python.org/pipermail/pypy…&lt;/a&gt;
    Sounds interesting. I wonder if RPython will grow in popularity separately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://saltandfat.com/post/33437971658"&gt;Double-corn tortillas&lt;/a&gt;
    I'd love to try this sometime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clips/pattern"&gt;clips/pattern · GitHub&lt;/a&gt;
    Web-mining in python. Lots of functionality here, BSD license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.brainpickings.org/index.php/2012/06/12/the-art-of-coffee-1961/"&gt;The Art of Coffee: A Mad Men Era Short Film | Brain Pickings&lt;/a&gt;
    I loved "This is Coffee!". 12 minute promotional short film from 1961 about coffee. It's wonderful to imagine the worn old mugs of my grandparents' generation new again, filled with something better than the electric-percolated canned junk I know they drank. Also great to see the Chemex in there, exactly the same as I use it today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/LearnableProgramming/"&gt;Learnable Programming&lt;/a&gt;
    Very clear and well-argued essay about how to make a more-understandable programming environment. I agreed with everything, and was left wondering how to apply this line of thought to more complex software. (Everyone has seen this by the time I post this list.)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robrohan.com/2009/09/14/objc-signaturevo/"&gt;@objc.signature(‘v@:@@o^@’) | Times New Rohan&lt;/a&gt;
    List of objc.signature codes &lt;/li&gt;
</description><category>1961</category><category>c-plus-plus</category><category>coffee</category><category>erlang</category><category>film</category><category>javascript</category><category>languages</category><category>learning</category><category>objc signature</category><category>patterns</category><category>programming</category><category>programming-languages</category><category>recipe</category><category>software</category><category>teaching</category><category>testing</category><category>tortilla</category><category>types</category><guid>http://michael-mccracken.net/posts/2012/10/selected-links.html</guid><pubDate>Thu, 25 Oct 2012 19:35:00 GMT</pubDate></item><item><title>Links for December 13th through December 19th</title><link>http://michael-mccracken.net/posts/2011/12/links-for-december-13th-through-december-19th.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for December 13th through December 19th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.patientslikeme.com/"&gt;Treatment and Side Effect Info from Patients Like You : PatientsLikeMe&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://insidehpc.com/2011/12/13/nvidia-opens-cuda-compiler-source-code/"&gt;NVIDIA open sources compiler for CUDA based on LLVM&lt;/a&gt; - tweeted by insideHPC at 12/13/11 7:19 PM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.aosabook.org/en/index.html"&gt;The Architecture of Open Source Applications&lt;/a&gt; - Architects look at thousands of buildings during their training, and study critiques of those buildings written by masters. In contrast, most software developers only ever get to know a handful of large programs well--usually programs they wrote themselves--and never study the great programs of history. As a result, they repeat one another's mistakes rather than building on one another's successes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This book's goal is to change that. In it, the authors of twenty-five open source applications explain how their software is structured, and why. What are each program's major components? How do they interact? And what did their builders learn during their development? In answering these questions, the contributors to this book provide unique insights into how they think.&lt;/p&gt;
&lt;p&gt;If you are a junior developer, and want to learn how your more experienced colleagues think, this book is the place to start. If you are an intermediate or senior developer, and want to see how your peers have solved hard design problems, this book can help you too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.neverworkintheory.org/?p=197"&gt;An Empirical Comparison of the Accuracy Rates of Novices using the Quorum, Perl, and Randomo Programming Languages - It will never work in theory&lt;/a&gt; - We present here an empirical study comparing the accuracy rates of novices writing software in three programming languages: Quorum, Perl, and Randomo. The first language, Quorum, we call an evidence-based programming language, where the syntax, semantics, and API designs change in correspondence to the latest academic research and literature on programming language usability. Second, while Perl is well known, we call Randomo a Placebo-language, where some of the syntax was chosen with a random number generator and the ASCII table. We compared novices that were programming for the first time using each of these languages, testing how accurately they could write simple programs using common program constructs (e.g., loops, conditionals, functions, variables, parameters). Results showed that while Quorum users were afforded significantly greater accuracy compared to those using Perl and Randomo, Perl users were unable to write programs more accurately than those using a language designed by chance&lt;/li&gt;
&lt;/ul&gt;</description><category>architecture</category><category>community</category><category>documentary</category><category>empirical-software-engineering</category><category>http://twitter.com/insideHPC/status/146761306207301633)</category><category>links</category><category>medicine</category><category>movies</category><category>opensource</category><category>pinboard-links</category><category>productivity</category><category>programming</category><category>software</category><guid>http://michael-mccracken.net/posts/2011/12/links-for-december-13th-through-december-19th.html</guid><pubDate>Tue, 27 Dec 2011 20:12:00 GMT</pubDate></item><item><title>Links for November 27th through December 1st</title><link>http://michael-mccracken.net/posts/2011/12/links-for-november-27th-through-december-1st.html</link><dc:creator>Michael McCracken</dc:creator><description>&lt;p&gt;My shared links for November 27th through December 1st:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://acme.cat-v.org/"&gt;The Acme User Interface for Programmers&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cise.ufl.edu/research/sparse/matrices/SNAP/"&gt;UF Sparse Matrix Collection - SNAP group&lt;/a&gt; - collection of datasets including social networks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cs.umd.edu/hcil/ase/"&gt;Action Science Explorer (Formerly iOpener Workbench)&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://tangra.si.umich.edu/clair/iopener/"&gt;iOpener Project&lt;/a&gt; - The goal of iOPENER (Information Organization for PENning Expositions on Research) is to generate readily-consumable surveys of different scientific domains and topics, targeted to different audiences and levels, e.g., expert specialists, scientists from related disciplines, educators, students, government decision makers, and citizens including minorities and underrepresented groups. Surveyed material is presented in different modalities, e.g., an enumerated list of articles, a bulleted list of key facts, a textual summary, or a visual presentation with zoom and filter capabilities. The original contributions of this research are in the creation of an infrastructure for automatically summarizing entire areas of scientific endeavor by linking three available technologies: (1) bibliometric lexical link mining; (2) summarization techniques; and (3) visualization tools for displaying both structure and content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://news.ycombinator.com/item?id=3289750"&gt;I regularly hire women for 65% to 75% of what males make | Hacker News&lt;/a&gt; - Lots of tips on salary negotiation for both sexes in the comments thread&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pjax.heroku.com/"&gt;pjax&lt;/a&gt; - ajax with permalinks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.imdb.com/title/tt0378378/"&gt;Moog (2004) - IMDb&lt;/a&gt; See also Walter/Wendy Carlos… &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>CHI</category><category>acme</category><category>ajax</category><category>citation</category><category>datasets</category><category>design</category><category>development</category><category>documentary</category><category>editor</category><category>graphs</category><category>gui</category><category>hci</category><category>links</category><category>moog</category><category>movie</category><category>negotiation</category><category>networks</category><category>pinboard-links</category><category>pjax</category><category>plan9</category><category>programming</category><category>publication</category><category>research</category><category>social-networks</category><category>software</category><category>to-watch</category><category>visualization</category><category>web</category><guid>http://michael-mccracken.net/posts/2011/12/links-for-november-27th-through-december-1st.html</guid><pubDate>Tue, 27 Dec 2011 20:11:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | michael-mccracken.net]]></title>
  <link href="http://michael-mccracken.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://michael-mccracken.net/"/>
  <updated>2013-09-12T12:34:42-07:00</updated>
  <id>http://michael-mccracken.net/</id>
  <author>
    <name><![CDATA[Michael McCracken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Links - Simulation, Programming, Crab Cakes and Hockey Player Usage Charts]]></title>
    <link href="http://michael-mccracken.net/2013/04/links/"/>
    <updated>2013-04-10T08:41:00-07:00</updated>
    <id>http://michael-mccracken.net/2013/04/links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://lambda-the-ultimate.org/node/4710">DYNAMO</a>
  Someone has rewritten one of the earliest simulation systems in JavaScript (the fate of all interesting software). Also includes a link to an article about the history of simulation software that sounds very interesting.</li>
<li><a href="http://feeds.seriouseats.com/~r/seriouseatsfeaturesvideos/~3/yfScRT6TNzw/the-food-lab-crab-cakes.html">The Food Lab: The Crabbiest Crab Cakes</a>
  I love crab cakes, but I&rsquo;m not sure I really want to try to make them at home. If I do, I&rsquo;ll use these tips. The Food Lab is fun stuff.</li>
<li><a href="http://mjtsai.com/blog/2013/03/30/debug-it/">Debug It!</a>
  A review of a book on debugging, which is a topic that I think should be taught right alongside programming. See also <a href="http://whyprogramsfail.com">&ldquo;Why Programs Fail&rdquo;</a></li>
<li><a href="http://www.givedirectly.org/">GiveDirectly: introducing a radical new way to give! | GiveDirectly</a>
  Send cash straight to poor people. If their assertions are true, it&rsquo;s a really interesting idea, and I can&rsquo;t believe it hasn&rsquo;t been done before. It also seems transparently better than microloans.</li>
<li><a href="https://github.com/ContinuumIO/Bokeh">ContinuumIO/Bokeh · GitHub</a>
  Something to look out for &mdash; a Python ggplot that works with HTML5 is a great idea. &ldquo;Bokeh (pronounced boh-Kay) is an implementation of Grammar of Graphics for Python, that also supports the customized rendering flexibility of Protovis and d3. Although it is a Python library, its primary output backend is HTML5 Canvas.  There are many excellent plotting packages for Python, but they generally do not optimize for the particular needs of statistical plotting (easy faceting, bulk application of aesthetic and visual parameters across categorical variables, pleasing default color palettes for categorical data, etc.). The goal of Bokeh is to provide a compelling Python equivalent of ggplot in R.&rdquo;</li>
<li><a href="http://kk.org/cooltools/archives/10441">FitDesk X1</a>
  Level up from a standing desk? I&rsquo;d love to try this for a day.</li>
<li><a href="http://lambda-the-ultimate.org/node/4699">Concurrent Revisions</a>
  DVCS-like concurrent programming. Interesting sounding research &ndash; I haven&rsquo;t read it yet&hellip;</li>
<li><a href="http://www.hockeyabstract.com/playerusagecharts">Many thanks to @robvollmannhl and the good folks at Hockey Abstract for these great interactive Player Usage Charts: hockeyabstract.com/playerusagecha…</a>
  Player Usage Charts are fascinating, but I can never figure out why people always change the axes so that the dots fill the space. It makes it impossible to compare two charts, and it&rsquo;s not obvious, so you end up comparing charts without realizing that it&rsquo;s meaningless.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More out of date links]]></title>
    <link href="http://michael-mccracken.net/2012/10/selected-links/"/>
    <updated>2012-10-25T12:35:00-07:00</updated>
    <id>http://michael-mccracken.net/2012/10/selected-links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://hammerprinciple.com/therighttool">Programming Languages · Hammer Principle</a>
  Very interesting survey site to answer the question &ldquo;what language is right for what task?&rdquo;</li>
<li><a href="http://james-iry.blogspot.co.uk/2010/05/types-la-chart.html">One Div Zero: Types à la Chart</a>
  A chart of languages according to type power/safety. Seems reasonable. Made me curious about the ones in the top right.</li>
<li><a href="https://github.com/philsquared/Catch/wiki">Home · philsquared/Catch Wiki</a>
  C++ unit testing framework, all in headers, looks nice.</li>
<li><a href="http://ferd.ca/an-open-letter-to-the-erlang-beginner-or-onlooker.html">ferd.ca &ndash;> An Open Letter to the Erlang Beginner (or Onlooker)</a>
  Interesting, balanced article about what makes erlang nice.</li>
<li><p><a href="http://worrydream.com/oatmeal/blind.html">&ldquo;Research is a blind date with knowledge.&rdquo; worrydream.com/oatmeal/blind.…</a></p></li>
<li><p><a href="http://mail.python.org/pipermail/pypy-dev/2012-October/010602.html">Splitting RPython (the language) and PyPy (a python interpreter) plan: mail.python.org/pipermail/pypy…</a>
  Sounds interesting. I wonder if RPython will grow in popularity separately.</p></li>
<li><p><a href="http://saltandfat.com/post/33437971658">Double-corn tortillas</a>
  I&rsquo;d love to try this sometime.</p></li>
<li><p><a href="https://github.com/clips/pattern">clips/pattern · GitHub</a>
  Web-mining in python. Lots of functionality here, BSD license.</p></li>
<li><p><a href="http://www.brainpickings.org/index.php/2012/06/12/the-art-of-coffee-1961/">The Art of Coffee: A Mad Men Era Short Film | Brain Pickings</a>
  I loved &ldquo;This is Coffee!&rdquo;. 12 minute promotional short film from 1961 about coffee. It&rsquo;s wonderful to imagine the worn old mugs of my grandparents' generation new again, filled with something better than the electric-percolated canned junk I know they drank. Also great to see the Chemex in there, exactly the same as I use it today.</p></li>
<li><a href="http://worrydream.com/LearnableProgramming/">Learnable Programming</a>
  Very clear and well-argued essay about how to make a more-understandable programming environment. I agreed with everything, and was left wondering how to apply this line of thought to more complex software. (Everyone has seen this by the time I post this list.)</li>
<li><a href="http://robrohan.com/2009/09/14/objc-signaturevo/">@objc.signature(‘v@:@@o^@’) | Times New Rohan</a>
  List of objc.signature codes</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More out of date links]]></title>
    <link href="http://michael-mccracken.net/2012/10/selected-links/"/>
    <updated>2012-10-25T12:35:00-07:00</updated>
    <id>http://michael-mccracken.net/2012/10/selected-links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://hammerprinciple.com/therighttool">Programming Languages · Hammer Principle</a>
  Very interesting survey site to answer the question &ldquo;what language is right for what task?&rdquo;</li>
<li><a href="http://james-iry.blogspot.co.uk/2010/05/types-la-chart.html">One Div Zero: Types à la Chart</a>
  A chart of languages according to type power/safety. Seems reasonable. Made me curious about the ones in the top right.</li>
<li><a href="https://github.com/philsquared/Catch/wiki">Home · philsquared/Catch Wiki</a>
  C++ unit testing framework, all in headers, looks nice.</li>
<li><a href="http://ferd.ca/an-open-letter-to-the-erlang-beginner-or-onlooker.html">ferd.ca &ndash;> An Open Letter to the Erlang Beginner (or Onlooker)</a>
  Interesting, balanced article about what makes erlang nice.</li>
<li><p><a href="http://worrydream.com/oatmeal/blind.html">&ldquo;Research is a blind date with knowledge.&rdquo; worrydream.com/oatmeal/blind.…</a></p></li>
<li><p><a href="http://mail.python.org/pipermail/pypy-dev/2012-October/010602.html">Splitting RPython (the language) and PyPy (a python interpreter) plan: mail.python.org/pipermail/pypy…</a>
  Sounds interesting. I wonder if RPython will grow in popularity separately.</p></li>
<li><p><a href="http://saltandfat.com/post/33437971658">Double-corn tortillas</a>
  I&rsquo;d love to try this sometime.</p></li>
<li><p><a href="https://github.com/clips/pattern">clips/pattern · GitHub</a>
  Web-mining in python. Lots of functionality here, BSD license.</p></li>
<li><p><a href="http://www.brainpickings.org/index.php/2012/06/12/the-art-of-coffee-1961/">The Art of Coffee: A Mad Men Era Short Film | Brain Pickings</a>
  I loved &ldquo;This is Coffee!&rdquo;. 12 minute promotional short film from 1961 about coffee. It&rsquo;s wonderful to imagine the worn old mugs of my grandparents' generation new again, filled with something better than the electric-percolated canned junk I know they drank. Also great to see the Chemex in there, exactly the same as I use it today.</p></li>
<li><a href="http://worrydream.com/LearnableProgramming/">Learnable Programming</a>
  Very clear and well-argued essay about how to make a more-understandable programming environment. I agreed with everything, and was left wondering how to apply this line of thought to more complex software. (Everyone has seen this by the time I post this list.)</li>
<li><a href="http://robrohan.com/2009/09/14/objc-signaturevo/">@objc.signature(‘v@:@@o^@’) | Times New Rohan</a>
  List of objc.signature codes</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Links]]></title>
    <link href="http://michael-mccracken.net/2012/10/links/"/>
    <updated>2012-10-08T00:47:00-07:00</updated>
    <id>http://michael-mccracken.net/2012/10/links</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://stackoverflow.com/questions/10857030/whats-so-bad-about-template-haskell">What&rsquo;s so bad about Template Haskell? &ndash; Stack Overflow</a></p>

<p>  A bunch of good answers to why Template Haskell is occasionally maligned.</p></li>
<li><p><a href="http://stackoverflow.com/questions/10845179/which-haskell-ghc-extensions-should-users-use-avoid/10849782#10849782">Which Haskell (GHC) extensions should users use/avoid? &ndash; Stack Overflow</a></p>

<p>  Interesting list of aesthetic judgements of haskell extensions. At press time I don&rsquo;t know what most of these words mean.</p></li>
<li><p><a href="http://www.yesodweb.com/blog/2011/04/yesod-template-haskell">Yesod and Template Haskell</a></p>

<p>  Short post on why Yesod uses template haskell (which has a bad rep)</p></li>
<li><p><a href="http://imakewebthings.com/deck.js/">deck.js » Modern HTML Presentations</a></p>

<p>  Best &ldquo;Write your presentations in HTML&rdquo; thing I&rsquo;ve seen yet, although I&rsquo;m not sure how great it&rsquo;d be at complex visuals or builds. Yes sometimes builds are good! <em>SOMETIMES</em>.</p></li>
<li><p><a href="http://redbot.org/">REDbot</a></p>

<p>  RED is a robot that checks HTTP resources to see how they&rsquo;ll behave, pointing out common problems and suggesting improvements. Although it is not a HTTP conformance tester, it can find a number of HTTP-related issues.</p></li>
<li><p><a href="https://github.com/visi-lang/visi">.@dpp’s Visi looks to be exactly the thing when Soulver isn’t enough and spreadsheets are rigid github.com/visi-lang/visi #emerginglangs</a></p>

<p>  Should I look at this before posting a link? Nah&hellip; But I will look at it, eventually! It looks interesting, I love this kind of stuff &ndash; although as usual I wonder if this is something you can already get in Mathematica but no one knows because it&rsquo;s so expensive.</p></li>
<li><p><a href="http://highscalability.com/blog/2012/7/30/prismatic-architecture-using-machine-learning-on-social-netw.html">High Scalability &ndash; Prismatic Architecture &ndash; Using Machine Learning on Social Networks to Figure Out What You Should Read on the Web </a></p>

<p>  Probably interesting? I skimmed this, I&rsquo;m not gonna lie, I don&rsquo;t remember much.</p></li>
<li><p><a href="http://deslide.clusterfake.net/">Deslidefied HTML</a></p>

<p>  Really useful bookmark to make slideshow news articles readable on one page. I am using it all the time!</p></li>
<li><p><a href="http://pragprog.com/magazines/2012-09/thinking-functionally-with-haskell">Thinking Functionally with Haskell</a></p>

<p>  &ldquo;"In which we explore what modern type systems bring to the table. Imagine an approach to programming where you write down some description of what your code should do, then before running your code you run some automatic tool to see if the code matches the description. That’s Test-driven development, you say!  Actually, this is what you are doing when you use static types in most languages too. Types are a description of the code’s inputs and outputs, and the check ensures that inputs and outputs match up and are used consistently. Modern type systems—such as in Haskell or above—are very flexible, and allow these descriptions to be quite detailed; plus they are not too obtrusive in use and often very helpful.  One point I’ll investigate here is how advances in types are converging with new ideas on testing, to the point where (I claim) the old distinctions are starting to blur and starting to open up exciting new possibilities—hence my suggestion that we need a new word to describe what we’re doing that is free from preconceptions and out-dated thinking.  So put aside your bad experiences from Java, and prepare to be amazed! &rdquo;"</p></li>
<li><p><a href="http://feedproxy.google.com/~r/ezyang/~3/3Vb6-OhkZws/">So you want to hack on IMAP…</a></p>

<p>  &ldquo;Well, first off, you’re horribly misinformed: you do not actually want to hack on IMAP.&rdquo; (I agree, IMAP bad.)</p></li>
<li><p><a href="http://waxy.org/2008/06/the_machine_that_changed_the_world/">The Machine That Changed the World: Great Brains &ndash; Waxy.org</a></p>

<p>  Documentary about computing history:
  &ldquo;It&rsquo;s a whirlwind tour of computing before the Web, with brilliant archival footage and interviews with key players — several of whom passed away since the filming. Jointly produced by WGBH Boston and the BBC, it originally aired in the UK as The Dream Machine before its U.S. premiere in January 1992. Its broadcast was accompanied by a book co-written by the documentary&rsquo;s producer Jon Palfreman.&rdquo;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Links]]></title>
    <link href="http://michael-mccracken.net/2012/10/links/"/>
    <updated>2012-10-08T00:47:00-07:00</updated>
    <id>http://michael-mccracken.net/2012/10/links</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://stackoverflow.com/questions/10857030/whats-so-bad-about-template-haskell">What&rsquo;s so bad about Template Haskell? &ndash; Stack Overflow</a></p>

<p>  A bunch of good answers to why Template Haskell is occasionally maligned.</p></li>
<li><p><a href="http://stackoverflow.com/questions/10845179/which-haskell-ghc-extensions-should-users-use-avoid/10849782#10849782">Which Haskell (GHC) extensions should users use/avoid? &ndash; Stack Overflow</a></p>

<p>  Interesting list of aesthetic judgements of haskell extensions. At press time I don&rsquo;t know what most of these words mean.</p></li>
<li><p><a href="http://www.yesodweb.com/blog/2011/04/yesod-template-haskell">Yesod and Template Haskell</a></p>

<p>  Short post on why Yesod uses template haskell (which has a bad rep)</p></li>
<li><p><a href="http://imakewebthings.com/deck.js/">deck.js » Modern HTML Presentations</a></p>

<p>  Best &ldquo;Write your presentations in HTML&rdquo; thing I&rsquo;ve seen yet, although I&rsquo;m not sure how great it&rsquo;d be at complex visuals or builds. Yes sometimes builds are good! <em>SOMETIMES</em>.</p></li>
<li><p><a href="http://redbot.org/">REDbot</a></p>

<p>  RED is a robot that checks HTTP resources to see how they&rsquo;ll behave, pointing out common problems and suggesting improvements. Although it is not a HTTP conformance tester, it can find a number of HTTP-related issues.</p></li>
<li><p><a href="https://github.com/visi-lang/visi">.@dpp’s Visi looks to be exactly the thing when Soulver isn’t enough and spreadsheets are rigid github.com/visi-lang/visi #emerginglangs</a></p>

<p>  Should I look at this before posting a link? Nah&hellip; But I will look at it, eventually! It looks interesting, I love this kind of stuff &ndash; although as usual I wonder if this is something you can already get in Mathematica but no one knows because it&rsquo;s so expensive.</p></li>
<li><p><a href="http://highscalability.com/blog/2012/7/30/prismatic-architecture-using-machine-learning-on-social-netw.html">High Scalability &ndash; Prismatic Architecture &ndash; Using Machine Learning on Social Networks to Figure Out What You Should Read on the Web </a></p>

<p>  Probably interesting? I skimmed this, I&rsquo;m not gonna lie, I don&rsquo;t remember much.</p></li>
<li><p><a href="http://deslide.clusterfake.net/">Deslidefied HTML</a></p>

<p>  Really useful bookmark to make slideshow news articles readable on one page. I am using it all the time!</p></li>
<li><p><a href="http://pragprog.com/magazines/2012-09/thinking-functionally-with-haskell">Thinking Functionally with Haskell</a></p>

<p>  &ldquo;"In which we explore what modern type systems bring to the table. Imagine an approach to programming where you write down some description of what your code should do, then before running your code you run some automatic tool to see if the code matches the description. That’s Test-driven development, you say!  Actually, this is what you are doing when you use static types in most languages too. Types are a description of the code’s inputs and outputs, and the check ensures that inputs and outputs match up and are used consistently. Modern type systems—such as in Haskell or above—are very flexible, and allow these descriptions to be quite detailed; plus they are not too obtrusive in use and often very helpful.  One point I’ll investigate here is how advances in types are converging with new ideas on testing, to the point where (I claim) the old distinctions are starting to blur and starting to open up exciting new possibilities—hence my suggestion that we need a new word to describe what we’re doing that is free from preconceptions and out-dated thinking.  So put aside your bad experiences from Java, and prepare to be amazed! &rdquo;"</p></li>
<li><p><a href="http://feedproxy.google.com/~r/ezyang/~3/3Vb6-OhkZws/">So you want to hack on IMAP…</a></p>

<p>  &ldquo;Well, first off, you’re horribly misinformed: you do not actually want to hack on IMAP.&rdquo; (I agree, IMAP bad.)</p></li>
<li><p><a href="http://waxy.org/2008/06/the_machine_that_changed_the_world/">The Machine That Changed the World: Great Brains &ndash; Waxy.org</a></p>

<p>  Documentary about computing history:
  &ldquo;It&rsquo;s a whirlwind tour of computing before the Web, with brilliant archival footage and interviews with key players — several of whom passed away since the filming. Jointly produced by WGBH Boston and the BBC, it originally aired in the UK as The Dream Machine before its U.S. premiere in January 1992. Its broadcast was accompanied by a book co-written by the documentary&rsquo;s producer Jon Palfreman.&rdquo;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

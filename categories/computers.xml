<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>michael-mccracken.net (computers)</title><link>http://michael-mccracken.net/</link><description></description><atom:link rel="self" href="http://michael-mccracken.net/categories/computers.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 13 Nov 2015 19:12:37 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Link: The Future of Computing Performance: Game Over or Next Level?</title><link>http://michael-mccracken.net/2011/06/link-the-future-of-computing-performance-game-over-or-next-level/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;From the National Academies: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://nap.edu/catalog.php?record_id=12980"&gt;The Future of Computing Performance: Game Over or Next Level?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A nice, thorough explanation of the current challenges in computing performance, ranging from transistor-level power vs. speed problems, up to how to program the circuits we're likely to end up with.&lt;/p&gt;
&lt;p&gt;Also includes a bonus reprint of two classic papers, Gordon Moore's "Cramming More Components onto Integrated Circuits" from 1965 - that's the paper you might expect it is, and Robert Dennard's "Design of Ion-Implanted MOSFET’s with Very Small Physical Dimensions", which I was less familiar with.&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>computing</category><category>performance</category><category>power</category><category>research</category><guid>http://michael-mccracken.net/2011/06/link-the-future-of-computing-performance-game-over-or-next-level/</guid><pubDate>Mon, 27 Jun 2011 18:10:00 GMT</pubDate></item><item><title>"Squeezing a CS Research Idea"</title><link>http://michael-mccracken.net/2011/05/squeezing-a-cs-research-idea/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;An interesting post about how to evaluate a research idea. Basically, try to think about the bounds: what's the maximum impact? Includes some good rules of thumb, like pay attention to physical constraints like the speed of light :)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.regehr.org/archives/537"&gt;Embedded in Academia : Squeezing a CS Research Idea&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>research</category><guid>http://michael-mccracken.net/2011/05/squeezing-a-cs-research-idea/</guid><pubDate>Fri, 27 May 2011 17:03:00 GMT</pubDate></item><item><title>kickingbear» Regarding Objective-C &amp; Copland 2010</title><link>http://michael-mccracken.net/2011/05/kickingbearc2bb-regarding-objective-c-copland-2010/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;I read John Siracusa's "Copland 2010" article back in '05, and listened to his recent update of it on his podcast. I wasn't very convinced, but I couldn't figure out quite how to say why. Today I think Guy nailed it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Siracusa argues that abstraction is the all consuming beast of computer science, I think he’s mostly correct but I can’t help but feel he’s more worried about abstracting yesterday’s issues than tomorrow’s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;via &lt;a href="http://kickingbear.com/blog/archives/168"&gt;kickingbear» Blog Archive » Regarding Objective-C &amp;amp; Copland 2010&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><guid>http://michael-mccracken.net/2011/05/kickingbearc2bb-regarding-objective-c-copland-2010/</guid><pubDate>Tue, 24 May 2011 16:31:00 GMT</pubDate></item><item><title>Early Days of Java in Sun Labs - Chuck McManis on HN, via Manuel Simoni</title><link>http://michael-mccracken.net/2011/03/early-days-of-java-in-sun-labs-chuck-mcmanis-on-hn-via-manuel-simoni/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;From &lt;a href="http://axisofeval.blogspot.com/2011/03/truth-is-stranger-than-fiction.html"&gt;The Axis of Eval: "Truth IS stranger than fiction"&lt;/a&gt;: Chuck McManis explains the cancellation and subsequent fame of Java.&lt;/p&gt;
&lt;p&gt;It's fascinating to me how often you hear about these overnight successes that took years to develop and were canceled, given up for dead, etc. many times.&lt;/p&gt;
&lt;p&gt;I remember hearing similar stories about Self and Erlang at HOPL-3, the History of Programming Languages conference. Maybe you shouldn't bet on the success of a new language unless it's been cancelled or abandoned at least once?&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>programming</category><guid>http://michael-mccracken.net/2011/03/early-days-of-java-in-sun-labs-chuck-mcmanis-on-hn-via-manuel-simoni/</guid><pubDate>Wed, 30 Mar 2011 17:26:00 GMT</pubDate></item><item><title>Introducing Overlay Scrollbars in Unity « Canonical Design</title><link>http://michael-mccracken.net/2011/03/overlay-scrollbars-canonical-design/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;From the always-interesting Canonical Design blog: 
&lt;a href="http://design.canonical.com/2011/03/introducing-overlay-scrollbars-in-unity/"&gt;Introducing Overlay Scrollbars in Unity&lt;/a&gt;. (Who wouldn't love to see an Apple Design blog? It's fun to follow along as some serious, talented people rethink stuff we use everyday…)&lt;/p&gt;
&lt;p&gt;Take a look at the video - and stick with it all the way through. At first I didn't like it but now I'm a fan. I like that they've expanded usable screen real estate by getting rid of the everpresent thumb, but kept a subtle visual indicator that there's more content - there's a small ~2px bar that scales like current thumbs do.&lt;/p&gt;
&lt;p&gt;My only concern would be that the little mini-thumb is too small and it will sometimes not be obvious that you can scroll. I think this happens on iOS, too - maybe it's not such a big deal.&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>interfaces</category><guid>http://michael-mccracken.net/2011/03/overlay-scrollbars-canonical-design/</guid><pubDate>Fri, 04 Mar 2011 20:16:00 GMT</pubDate></item><item><title>Delight Innovation</title><link>http://michael-mccracken.net/2010/04/delight-innovation/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;I've recently seen the concept of &lt;em&gt;delight&lt;/em&gt; in software brought up in a couple different places, and I just wanted to cheer it on.&lt;/p&gt;
&lt;p&gt;Jesper at &lt;a href="http://waffle.wootest.net"&gt;waffle&lt;/a&gt; is starting an open-source web browser project to revive the spirit of OmniWeb, called &lt;a href="http://waffle.wootest.net/2010/04/18/rouse-involvement/"&gt;rouse&lt;/a&gt;. He coins the phrase "delight innovation". I love that phrase. He's talking about taking a browser, something that's relatively stable, and looking for ways to make it noticeably better again. I love that impulse - it's something I'm hoping to see in email clients too.&lt;/p&gt;
&lt;p&gt;Another place that delight showed up (along with Surprise and Joy), was at &lt;a href="http://52weeksofux.com"&gt;52 weeks of UX&lt;/a&gt; in a post called &lt;a href="http://52weeksofux.com/post/531355592/design-for-delight"&gt;"design for delight"&lt;/a&gt;. That post  seemed to be a little more about the parts of design that don't affect functionality, but do add personality. I really agree with this angle too - I like a program that has little details that are &lt;a href="http://borkware.com/quickies/single?id=319"&gt;just for fun&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>delight</category><category>design</category><category>innovation</category><guid>http://michael-mccracken.net/2010/04/delight-innovation/</guid><pubDate>Tue, 20 Apr 2010 17:48:00 GMT</pubDate></item><item><title>The Workstation is not Dead</title><link>http://michael-mccracken.net/2010/04/the-workstation-is-not-dead/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;[caption id="attachment_278" align="alignright" width="180" caption="The Workstation - RIP 2010?"]&lt;a href="http://michael-mccracken.net/wp2/wp-content/uploads/2010/04/450px-Xerox_Alto_mit_Rechner.jpg"&gt;&lt;img alt="" src="http://michael-mccracken.net/wp2/wp-content/uploads/2010/04/450px-Xerox_Alto_mit_Rechner.jpg"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Marco Arment &lt;a href="http://www.marco.org/519621380"&gt;wrote yesterday&lt;/a&gt; about mobile computing being more exciting than what he called "Desk" computing. I'm a fan of Marco's writing, and I usually agree with him, but that post got me thinking. I can't argue that mobile isn't exciting, but I disagree with his assertion that desktop computing is a solved problem. He's right that the pace of innovation has slowed. Certainly the last couple of OS X releases have fewer and fewer compelling differences. In fact, I'm writing this on OS X 10.5 -- 10.6 didn't impress me enough to make me bother upgrading.&lt;/p&gt;
&lt;p&gt;Still, when Marco asks what I want out of 10.7, I think "what &lt;em&gt;don't&lt;/em&gt; I want"? &lt;/p&gt;
&lt;p&gt;I think there's tons of room to improve on and even rethink the workstation.&lt;/p&gt;
&lt;p&gt;Maybe now that the consumer train has shifted toward more custom-designed tools for browsing, games, and social apps, there's room for workstation OSs to grow in ways that might improve them without worrying about leaving the home user behind (or boring them).&lt;/p&gt;
&lt;p&gt;I'm not asking for unintuitive design. What I'm asking for is powerful tools - system and apps - for people who use computers for work every day. I certainly hope that these power tools will be built with elegance and style. I'm not asking for dual cameras and four speakers.&lt;/p&gt;
&lt;p&gt;Market forces have limited development of crucial daily-use work tools to what will appeal to the home &amp;amp; leisure market. For instance, Apple ships Mail and iCal with the OS. Both are fine programs, but are clearly trying to ride the line between work features such as meeting planning, and consumer features like stationery. Meanwhile, the market for alternatives is limited, and even some of the alternatives have taken the approach of adding consumer-related features. &lt;a href="http://michael-mccracken.net/2010/04/the-workstation-is-not-dead/http//postbox-inc.com/"&gt;Postbox&lt;/a&gt;, for instance, has added facebook and twitter support. That's not helping me get work done - quite the opposite, really.&lt;/p&gt;
&lt;p&gt;But am I really just talking about incremental improvements and a few more work-oriented features here and there? I don't think so. To be more specific about what kind of big improvements I think are possible in desktop systems, I did a few minutes of brainstorming. Here's what I came up with:&lt;/p&gt;
&lt;p&gt;Like the personal jetpack, I'm still waiting for the system that knows what I'm trying to do and co-ordinates to help me get it done. The one that learns (even crudely!) about my habits and the time of day, my colleagues, their schedules, etc. The one with this knowledge baked in everywhere in the system. For instance, it knows which app's notifications can be ignored for later.&lt;/p&gt;
&lt;p&gt;As a start, I'd even settle for a single system that actually uses all the good ideas that have come up in the past 30 years. Let's at least catch up to Douglas Engelbart's vision of the &lt;a href="http://en.wikipedia.org/wiki/On-Line_System#cite_note-3"&gt;NLS&lt;/a&gt; system for augmenting collective knowledge work before we call it a day.&lt;/p&gt;
&lt;p&gt;Good search everywhere has been a real improvement, but what about full support for smart annotations for files, events, people and other data? The BeOS file system comes to mind. Search is better when there's better info to search for. If I push it a little, some smart background prediction of categories for documents that'd help me find them later -- that couldn't hurt. Why doesn't a file know who emailed it to me?&lt;/p&gt;
&lt;p&gt;Another blast from the past - maybe OpenDoc was a stretch, but more open document formats and easier flowing data between applications isn't a bad idea - can we expand on that?&lt;/p&gt;
&lt;p&gt;This one ties in with mobile devices - Real, honest to god multi-computer network syncing. It can be done - it should be baked in! What if your filesystem was actually an easily merge-able version-controlled document oriented database like CouchDB? Can we use some ideas from distributed version control to make sharing documents on disconnected filesystems work right automatically? I still think the best solution doesn't depend on storing everything on servers (especially public servers). &lt;/p&gt;
&lt;p&gt;That leads to the oft-repeated idea of getting rid of "saving". I shouldn't have to commit changes - maybe I want to tag a version, but the data should always be written to disk.&lt;/p&gt;
&lt;p&gt;Every app should be able to know about communication (mail, IM, SMS, whatever) that might affect what you're working on in it. Today's apps have uniform access to your files - but not to your messages. This seems like a bad historical distinction - they're both relevant data. For example, why do I have to "save attachments"? It's already on my disk…&lt;/p&gt;
&lt;p&gt;What about application and system scripting that &lt;em&gt;really works&lt;/em&gt; - that's easy enough for quick things but powerful and fast enough to grow a real program from? Let me start them as visual or spoken one-off commands but then edit and share them as text.&lt;/p&gt;
&lt;p&gt;System support for Quicksilver/Launchbar/Ubiquity-style text command lines. Tie this into the scripting system. Make it feel like I tell the &lt;em&gt;computer&lt;/em&gt; what to do instead of finding the right app to tell, opening it, etc. &lt;/p&gt;
&lt;p&gt;System-wide hypertext - I should be able to create robust links between document parts, messages, people, and other entities. It should be fast to view an annotated list of changes across versions of a document, showing who did them and what they said about it in emails. This shouldn't have to all reside on some central server to work.&lt;/p&gt;
&lt;p&gt;Do you have any ideas to add to the list?&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>desktop</category><category>mobile</category><category>workstation</category><guid>http://michael-mccracken.net/2010/04/the-workstation-is-not-dead/</guid><pubDate>Wed, 14 Apr 2010 18:57:00 GMT</pubDate></item><item><title>Tinkering in the Sideshow</title><link>http://michael-mccracken.net/2010/02/tinkering-in-the-sideshow/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;Last week, &lt;a href="http://al3x.net/2010/01/28/ipad.html"&gt;Alex Payne&lt;/a&gt; and &lt;a href="http://diveintomark.org/archives/2010/01/29/tinkerers-sunset"&gt;Mark Pilgrim&lt;/a&gt; both made some heartfelt arguments explaining why they think the fact that Apple's vision of the computing future as a relatively closed appliance is depressing. I agree, and I want to explain exactly why, now that I think I've figured it out.&lt;/p&gt;
&lt;p&gt;Each post got plenty of responses. Dissenters have a wide variety of reasons for why it's no big deal, ranging from "tomorrows tinkerers will just play with different technology, like &lt;a href="http://diveintomark.org/archives/2010/01/29/tinkerers-sunset#comment-13600"&gt;bio-mecha&lt;/a&gt;" (fascinating!), to a lot of people saying, essentially, "Just don't buy the appliance if you want a computer" (obvious!). &lt;/p&gt;
&lt;p&gt;Others have made a solid point that the iPad is the next big computing paradigm. Steven Frank calls it a &lt;a href="http://stevenf.tumblr.com/post/359224392/i-need-to-talk-to-you-about-computers-ive-been"&gt;"New World"&lt;/a&gt; device. I can't help but agree, and of course powerful devices that empower instead of confuse the user are a good thing. Replacing most of the world's overcomplicated, fussy laptops with focused and reliable devices is a good thing. &lt;/p&gt;
&lt;p&gt;Of course, general purpose, hackable computers are not really going away, not soon. Even if everyone uses an iPad for personal stuff and a Chrome OS netbook to access private cloud services for business work, there will still be a need for workstations, and I hope the people building complete personal systems out of Free Software don't give up.&lt;/p&gt;
&lt;p&gt;However, in a response to comments on his post, &lt;a href="http://diveintomark.org/archives/2010/01/29/tinkerers-sunset#comment-13616"&gt;Mark Pilgrim made a gloomy prediction&lt;/a&gt;: "People haven’t figured it out yet, but Mac OS X is on its last legs. By 2015, Apple will make appliances and developer add-ons. Not general purpose computing devices." &lt;/p&gt;
&lt;p&gt;If you ask me, this is the real problem.&lt;/p&gt;
&lt;p&gt;The problem is that hackable computers &lt;em&gt;that I want to use&lt;/em&gt; could very well be fading out. Maybe Mark's overstating things, but I would not be surprised to see the Mac, and OS X, as a relatively low priority for Apple in the near future. Design and development effort and creativity will naturally go increasingly toward the more profitable platform - the one making computing finally pleasant for the normal person.&lt;/p&gt;
&lt;p&gt;I'm worried that this will happen for third-party developers too. &lt;a href="http://violasong.com/2010/02/my-worst-ipad-fears"&gt;I'm not the only one.&lt;/a&gt; Back in 2002, Brent Simmons described developing user code for the Mac as &lt;a href="http://inessential.com/2002/09/19/why_i_develop_for_mac_os_x"&gt;"the show"&lt;/a&gt;. Is there any doubt that Apple's mobile OS is "the show" now? &lt;/p&gt;
&lt;p&gt;Where does that leave the rest of us who still have to or want to use a more powerful platform? &lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>ipad</category><category>me</category><category>melancholy</category><category>tinkering</category><guid>http://michael-mccracken.net/2010/02/tinkering-in-the-sideshow/</guid><pubDate>Wed, 03 Feb 2010 10:31:00 GMT</pubDate></item><item><title>Tinkering</title><link>http://michael-mccracken.net/2009/09/tinkering/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;I really liked a recent post by Alex Payne titled &lt;a href="http://al3x.net/2009/08/10/switching-season.html"&gt;Switching Season&lt;/a&gt;.  He says he gets an itch every year or so to go try something different, and I can sympathize. What he says at the end really resonates:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s about computer &lt;em&gt;usage&lt;/em&gt; as a creative act, something that becomes harder and harder to experience the more proficient one gets with a computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I feel this way every once in a while too - It used to be fun just getting a computer to do something. Once you know enough about how it works and most of what you do is handled pretty smoothly, some of the fun goes out of it. The problem with high-quality free apps like Mail and Address Book is that they remove the motivation for people to tinker with new ways of using computers for the same old things.&lt;/p&gt;
&lt;p&gt;This urge to tinker is pretty strong, at least for me, and I think it might be one reason why I'm not so excited about web and mobile (at least iPhone) programming. Both platforms have a lot going for them, but the barrier to tinkering with my data is high - sometimes I can't get my data out of a service, and if I want to write scripts to combine two web apps, where do they run?&lt;/p&gt;
&lt;p&gt;For example, I've seen a lot of great things come from the community built around BibDesk's scripting interface, and if it were a web app, none of that would have happened.&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>computing</category><category>desktopvswebapps</category><category>mac</category><category>scripting</category><category>tinkering</category><guid>http://michael-mccracken.net/2009/09/tinkering/</guid><pubDate>Mon, 07 Sep 2009 19:04:00 GMT</pubDate></item><item><title>go juggle — an attention callback</title><link>http://michael-mccracken.net/2008/08/go-juggle-an-attention-callback/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;Sometimes progress on a project for me consists of a few short bursts of activity in between stretches of waiting for some long-running thing to complete so I can figure out what I need to do with it next.&lt;/p&gt;
&lt;p&gt;Because I always have more than one project going, I don't actually wait much. I just switch workspaces and try to make progress on the next thing. If I can't make progress on anything immediate, I'll end up checking email or looking up something for a side project.&lt;/p&gt;
&lt;p&gt;This kind of multitasking is inefficient, but inevitable when I might have to wait for 20 minutes or more for a compute job or a compile to finish.&lt;/p&gt;
&lt;p&gt;The problem with this approach is that the things I'm waiting for often finish while I'm off doing something else, and if I get too involved, the low-priority research or emails will eat up my day while the high-priority work sits waiting for me.&lt;/p&gt;
&lt;p&gt;I've attacked this problem in the past when using OS X with &lt;a href="http://michael-mccracken.net/2008/08/go-juggle-an-attention-callback/gr"&gt;growl&lt;/a&gt;, but I can't call growlnotify from remote systems. However, I just found &lt;a href="http://michael-mccracken.net/2008/08/go-juggle-an-attention-callback/dzen"&gt;dzen&lt;/a&gt; for X Windows, a lightweight notification display utility that compiles easily on every system I've tried, and works remotely with ssh X forwarding.&lt;/p&gt;
&lt;p&gt;I wrote a simple script called &lt;code&gt;go&lt;/code&gt;, which just executes its arguments and runs &lt;code&gt;dzen&lt;/code&gt; when it's done. Now I type (for example) &lt;code&gt;go make&lt;/code&gt; and I can switch over to something else, confident that I'll see a big popup window letting me know when I can get back to working on my highest priority project.&lt;/p&gt;
&lt;p&gt;Here's basically the entire &lt;code&gt;go&lt;/code&gt; script:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;#!/bin/ksh&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; completed on &lt;span class="sb"&gt;`&lt;/span&gt;hostname&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt; dzen2 -p -h &lt;span class="m"&gt;64&lt;/span&gt; -bg darkblue
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It's simple but it's working great for me. I've tried some improvements like randomizing window placement to avoid overlapping notifications, but the simple version above really does all I need.&lt;/p&gt;
&lt;p&gt;Finally, a couple of details. zsh always seems to want to spell-check 'go', so I really named it '~/bin/executeAndNotify.sh' and just aliased 'go' to that.
Also, I've found it can mess with shell quoting as is, so sometimes I have to do &lt;code&gt;'somecommand ; go echo done'&lt;/code&gt;. If someone has a tip on getting the quoting right in the script, I'd love to hear it. The problem crops up when you try something like 'go make CC="cc -g"' - the quotes don't make it through.&lt;/p&gt;&lt;/div&gt;</description><category>computers</category><category>productivity</category><category>script utility productivity</category><category>scripts</category><category>X Windows</category><guid>http://michael-mccracken.net/2008/08/go-juggle-an-attention-callback/</guid><pubDate>Fri, 29 Aug 2008 02:31:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>michael-mccracken.net (programming)</title><link>http://michael-mccracken.net/</link><description></description><atom:link rel="self" href="http://michael-mccracken.net/categories/programming.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 13 Nov 2015 19:12:38 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Links for June 27, 2014</title><link>http://michael-mccracken.net/2014/06/links-for-June-27-2014/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://opentuner.org/"&gt;OpenTuner by jansel&lt;/a&gt;
    "OpenTuner is a new framework for building domain-specific multi-objective program autotuners. OpenTuner supports fully customizable configuration representations, an extensible technique representation to allow for domain-specific techniques, and an easy to use interface for communicating with the tuned program. A key capability inside OpenTuner is the use of ensembles of disparate search techniques simultaneously, techniques which perform well will receive larger testing budgets and techniques which perform poorly will be disabled." -- This looks really useful. I started on something like this long ago at LLNL, but since I was so young I focused mostly on fancy plots and designing a language for describing experiments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://vimeo.com/95534178"&gt;Paper to Plants on Vimeo&lt;/a&gt;
    A really cute video about a game that seems pretty charming. I'm still not sold on little kids using iPads so much, I'm told it's bad for their eye development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.computingcomfort.org/create2.asp"&gt;Ergonomic Workspace Planner Tool | ComputingComfort.org&lt;/a&gt;
    Use this to figure out the optimal height of your standing desk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mbutterick.github.io/pollen/doc/"&gt;pollen&lt;/a&gt;
    Write web based books in racket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dealloc.me/2014/05/24/opendata-house-hunting/"&gt;Finding the perfect house using open data — dealloc.me&lt;/a&gt;
    A guy builds a map of available houses in Portland that match his desires. Seems like a good real estate agent should do this for you - but how do you know you've got a good one? I guess you have to write some code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://billmill.org/pymag-trees/"&gt;Drawing Presentable Trees&lt;/a&gt;
    "When I needed to draw some trees for a project I was doing, I assumed that there would be a classic, easy algorithm for drawing neat trees. What I found instead was much more interesting: not only is tree layout an NP-complete problem1, but there is a long and interesting history behind tree-drawing algorithms. I will use the history of tree drawing algorithms to introduce central concepts one at a time, using each of them to build up to a complete O(n) algorithm for drawing attractive diagrams of trees." -- I've always wondered what a good way to do this would be. Knew it had to be a solved problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://againstallgrain.com/2013/10/12/grain-free-oatmeal-raisin-cookies/"&gt;Grain-Free Oatmeal Raisin Cookies | Against All Grain - Delectable paleo recipes to eat &amp;amp; feel great&lt;/a&gt;
    If you want oatmeal-raisin but you're trying to avoid oats and sugar, these are really quite good. The coconut makes a great texture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.slate.com/articles/life/family/2014/06/lev_grossman_on_his_daughter_lily_how_being_a_father_ruined_my_life_and.html"&gt;Lev Grossman on his daughter, Lily: How being a father ruined my life and made me a better writer.&lt;/a&gt;
    A really heartfelt story about becoming a dad and getting your act together. Now that I have kids I'm a total sucker for this kind of article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://hal.archives-ouvertes.fr/inria-00555588/"&gt;HAL :: [inria-00555588, version 1] A comprehensive study of Convergent and Commutative Replicated Data Types&lt;/a&gt;
    Formal exploration of sync-able data types. Abstract: "Eventual consistency aims to ensure that replicas of some mutable shared object converge without foreground synchronisation. Previous approaches to eventual consistency are ad-hoc and error-prone. We study a principled approach: to base the design of shared data types on some simple formal conditions that are sufficient to guarantee eventual consistency. We call these types Convergent or Commutative Replicated Data Types (CRDTs). This paper formalises asynchronous object replication, either state based or operation based, and provides a sufficient condition appropriate for each case. It describes several useful CRDTs, including container data types supporting both \add and \remove operations with clean semantics, and more complex types such as graphs, montonic DAGs, and sequences. It discusses some properties needed to implement non-trivial CRDTs."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dev.stephendiehl.com/hask/#intro"&gt;What I Wish I Knew When Learning Haskell 2.1 ( Stephen Diehl )&lt;/a&gt;
    Nice quick article with practical tips for beginners.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.psmag.com/navigation/business-economics/talent-migration-work-creative-much-new-york-poor-pittsburgh-rich-82894/"&gt;Not So Much 'New York Poor' as 'Pittsburgh Rich' - Pacific Standard: The Science of Society&lt;/a&gt;
    You can get a lot for your money in Pittsburgh, and lots of other places throughout the US. I'm from Pgh, and have fond memories. I'd consider moving back there if they could fix the weather.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://aphyr.com/posts/317-call-me-maybe-elasticsearch"&gt;Call me maybe: Elasticsearch&lt;/a&gt;
    Part of a series of irreverent but thorough explorations of various popular distributed systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://m.theatlantic.com/technology/archive/2014/05/what-do-we-save-when-we-save-the-internet/370885/"&gt;What Do We Save When We Save the Internet&lt;/a&gt;
    So as you proceed with your protests, I wonder if you might also ask, quietly, to yourself even, what new growth might erupt if we let the Internet as we know it burn. Shouldn't we at least ponder the question? Perhaps we’d be better off tolerating the venial regret of having lost something than suffering the mortal regret of enduring it."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.musanim.com/"&gt;Music Animation Machine — "Music Worth Watching"&lt;/a&gt;
    Old stuff, but great. Couldn't believe I hadn't bookmarked it long ago.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://serialized.net/2013/03/moving-from-octopress-to-nikola/"&gt;Moving from Octopress to Nikola | serialized.net&lt;/a&gt;
    This post and a few tweaks got me into nikola without much hassle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>acheme</category><category>algorithms</category><category>analysis</category><category>app</category><category>art</category><category>autotuning</category><category>blogging</category><category>calculator</category><category>constraints</category><category>cookie</category><category>CRDT</category><category>criticism</category><category>culture</category><category>data</category><category>data-structures</category><category>diagram</category><category>ergonomics</category><category>estate</category><category>eventual-consistency</category><category>fatherhood</category><category>finance</category><category>gluten-free</category><category>graphics</category><category>growing</category><category>haskell</category><category>housing</category><category>howto</category><category>internet</category><category>kids</category><category>language</category><category>maps</category><category>merging</category><category>music</category><category>nikola</category><category>oatmeal</category><category>octopress</category><category>optimization</category><category>paleo</category><category>parenting</category><category>performance</category><category>pittsburgh</category><category>plants</category><category>programming</category><category>publishing</category><category>quickref</category><category>racket</category><category>real</category><category>recipe</category><category>reference</category><category>research</category><category>solver</category><category>sync</category><category>tree</category><category>tuning</category><category>typesetting</category><category>up</category><category>video</category><category>visualization</category><category>workstation</category><category>writing</category><guid>http://michael-mccracken.net/2014/06/links-for-June-27-2014/</guid><pubDate>Fri, 27 Jun 2014 19:24:00 GMT</pubDate></item><item><title>Links: Simulation, Programming, Crab Cakes and Hockey Player Usage Charts</title><link>http://michael-mccracken.net/2013/04/links/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lambda-the-ultimate.org/node/4710"&gt;DYNAMO&lt;/a&gt;
    Someone has rewritten one of the earliest simulation systems in JavaScript (the fate of all interesting software). Also includes a link to an article about the history of simulation software that sounds very interesting.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.seriouseats.com/~r/seriouseatsfeaturesvideos/~3/yfScRT6TNzw/the-food-lab-crab-cakes.html"&gt;The Food Lab: The Crabbiest Crab Cakes&lt;/a&gt;
    I love crab cakes, but I'm not sure I really want to try to make them at home. If I do, I'll use these tips. The Food Lab is fun stuff.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mjtsai.com/blog/2013/03/30/debug-it/"&gt;Debug It!&lt;/a&gt;
    A review of a book on debugging, which is a topic that I think should be taught right alongside programming. See also &lt;a href="http://whyprogramsfail.com"&gt;"Why Programs Fail"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.givedirectly.org/"&gt;GiveDirectly: introducing a radical new way to give! | GiveDirectly&lt;/a&gt;
    Send cash straight to poor people. If their assertions are true, it's a really interesting idea, and I can't believe it hasn't been done before. It also seems transparently better than microloans.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ContinuumIO/Bokeh"&gt;ContinuumIO/Bokeh · GitHub&lt;/a&gt;
    Something to look out for -- a Python ggplot that works with HTML5 is a great idea. "Bokeh (pronounced boh-Kay) is an implementation of Grammar of Graphics for Python, that also supports the customized rendering flexibility of Protovis and d3. Although it is a Python library, its primary output backend is HTML5 Canvas.  There are many excellent plotting packages for Python, but they generally do not optimize for the particular needs of statistical plotting (easy faceting, bulk application of aesthetic and visual parameters across categorical variables, pleasing default color palettes for categorical data, etc.). The goal of Bokeh is to provide a compelling Python equivalent of ggplot in R."&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kk.org/cooltools/archives/10441"&gt;FitDesk X1&lt;/a&gt;
    Level up from a standing desk? I'd love to try this for a day.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lambda-the-ultimate.org/node/4699"&gt;Concurrent Revisions&lt;/a&gt;
    DVCS-like concurrent programming. Interesting sounding research - I haven't read it yet...&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hockeyabstract.com/playerusagecharts"&gt;Many thanks to @robvollmannhl and the good folks at Hockey Abstract for these great interactive Player Usage Charts: hockeyabstract.com/playerusagecha…&lt;/a&gt;
    Player Usage Charts are fascinating, but I can never figure out why people always change the axes so that the dots fill the space. It makes it impossible to compare two charts, and it's not obvious, so you end up comparing charts without realizing that it's meaningless.&lt;/li&gt;
&lt;/ul&gt;</description><category>charity</category><category>crab-cake</category><category>data-analysis</category><category>Debugging</category><category>giving</category><category>plotting</category><category>programming</category><category>python</category><category>recipe</category><category>Recipe books</category><category>research</category><guid>http://michael-mccracken.net/2013/04/links/</guid><pubDate>Wed, 10 Apr 2013 15:41:00 GMT</pubDate></item><item><title>More out of date links</title><link>http://michael-mccracken.net/2012/10/selected-links/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hammerprinciple.com/therighttool"&gt;Programming Languages · Hammer Principle&lt;/a&gt;
    Very interesting survey site to answer the question "what language is right for what task?"&lt;/li&gt;
&lt;li&gt;&lt;a href="http://james-iry.blogspot.co.uk/2010/05/types-la-chart.html"&gt;One Div Zero: Types à la Chart&lt;/a&gt;
    A chart of languages according to type power/safety. Seems reasonable. Made me curious about the ones in the top right. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/philsquared/Catch/wiki"&gt;Home · philsquared/Catch Wiki&lt;/a&gt;
    C++ unit testing framework, all in headers, looks nice.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ferd.ca/an-open-letter-to-the-erlang-beginner-or-onlooker.html"&gt;ferd.ca -&amp;gt; An Open Letter to the Erlang Beginner (or Onlooker)&lt;/a&gt;
    Interesting, balanced article about what makes erlang nice. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://worrydream.com/oatmeal/blind.html"&gt;"Research is a blind date with knowledge." worrydream.com/oatmeal/blind.…&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mail.python.org/pipermail/pypy-dev/2012-October/010602.html"&gt;Splitting RPython (the language) and PyPy (a python interpreter) plan: mail.python.org/pipermail/pypy…&lt;/a&gt;
    Sounds interesting. I wonder if RPython will grow in popularity separately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://saltandfat.com/post/33437971658"&gt;Double-corn tortillas&lt;/a&gt;
    I'd love to try this sometime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clips/pattern"&gt;clips/pattern · GitHub&lt;/a&gt;
    Web-mining in python. Lots of functionality here, BSD license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.brainpickings.org/index.php/2012/06/12/the-art-of-coffee-1961/"&gt;The Art of Coffee: A Mad Men Era Short Film | Brain Pickings&lt;/a&gt;
    I loved "This is Coffee!". 12 minute promotional short film from 1961 about coffee. It's wonderful to imagine the worn old mugs of my grandparents' generation new again, filled with something better than the electric-percolated canned junk I know they drank. Also great to see the Chemex in there, exactly the same as I use it today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/LearnableProgramming/"&gt;Learnable Programming&lt;/a&gt;
    Very clear and well-argued essay about how to make a more-understandable programming environment. I agreed with everything, and was left wondering how to apply this line of thought to more complex software. (Everyone has seen this by the time I post this list.)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robrohan.com/2009/09/14/objc-signaturevo/"&gt;@objc.signature(‘v@:@@o^@’) | Times New Rohan&lt;/a&gt;
    List of objc.signature codes &lt;/li&gt;
&lt;/ul&gt;</description><category>1961</category><category>c-plus-plus</category><category>coffee</category><category>erlang</category><category>film</category><category>javascript</category><category>languages</category><category>learning</category><category>objc signature</category><category>patterns</category><category>programming</category><category>programming-languages</category><category>recipe</category><category>software</category><category>teaching</category><category>testing</category><category>tortilla</category><category>types</category><guid>http://michael-mccracken.net/2012/10/selected-links/</guid><pubDate>Thu, 25 Oct 2012 19:35:00 GMT</pubDate></item><item><title>Links</title><link>http://michael-mccracken.net/2012/10/links/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10857030/whats-so-bad-about-template-haskell"&gt;What's so bad about Template Haskell? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A bunch of good answers to why Template Haskell is occasionally maligned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10845179/which-haskell-ghc-extensions-should-users-use-avoid/10849782#10849782"&gt;Which Haskell (GHC) extensions should users use/avoid? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting list of aesthetic judgements of haskell extensions. At press time I don't know what most of these words mean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.yesodweb.com/blog/2011/04/yesod-template-haskell"&gt;Yesod and Template Haskell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Short post on why Yesod uses template haskell (which has a bad rep)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://imakewebthings.com/deck.js/"&gt;deck.js » Modern HTML Presentations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best "Write your presentations in HTML" thing I've seen yet, although I'm not sure how great it'd be at complex visuals or builds. Yes sometimes builds are good! &lt;em&gt;SOMETIMES&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://redbot.org/"&gt;REDbot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RED is a robot that checks HTTP resources to see how they'll behave, pointing out common problems and suggesting improvements. Although it is not a HTTP conformance tester, it can find a number of HTTP-related issues. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/visi-lang/visi"&gt;.@dpp’s Visi looks to be exactly the thing when Soulver isn’t enough and spreadsheets are rigid github.com/visi-lang/visi #emerginglangs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Should I look at this before posting a link? Nah... But I will look at it, eventually! It looks interesting, I love this kind of stuff - although as usual I wonder if this is something you can already get in Mathematica but no one knows because it's so expensive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://highscalability.com/blog/2012/7/30/prismatic-architecture-using-machine-learning-on-social-netw.html"&gt;High Scalability - Prismatic Architecture - Using Machine Learning on Social Networks to Figure Out What You Should Read on the Web &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Probably interesting? I skimmed this, I'm not gonna lie, I don't remember much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://deslide.clusterfake.net/"&gt;Deslidefied HTML&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really useful bookmark to make slideshow news articles readable on one page. I am using it all the time!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pragprog.com/magazines/2012-09/thinking-functionally-with-haskell"&gt;Thinking Functionally with Haskell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;""In which we explore what modern type systems bring to the table. Imagine an approach to programming where you write down some description of what your code should do, then before running your code you run some automatic tool to see if the code matches the description. That’s Test-driven development, you say!  Actually, this is what you are doing when you use static types in most languages too. Types are a description of the code’s inputs and outputs, and the check ensures that inputs and outputs match up and are used consistently. Modern type systems—such as in Haskell or above—are very flexible, and allow these descriptions to be quite detailed; plus they are not too obtrusive in use and often very helpful.  One point I’ll investigate here is how advances in types are converging with new ideas on testing, to the point where (I claim) the old distinctions are starting to blur and starting to open up exciting new possibilities—hence my suggestion that we need a new word to describe what we’re doing that is free from preconceptions and out-dated thinking.  So put aside your bad experiences from Java, and prepare to be amazed! ""&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://feedproxy.google.com/~r/ezyang/~3/3Vb6-OhkZws/"&gt;So you want to hack on IMAP…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;"Well, first off, you’re horribly misinformed: you do not actually want to hack on IMAP." (I agree, IMAP bad.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://waxy.org/2008/06/the_machine_that_changed_the_world/"&gt;The Machine That Changed the World: Great Brains - Waxy.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Documentary about computing history:
"It's a whirlwind tour of computing before the Web, with brilliant archival footage and interviews with key players — several of whom passed away since the filming. Jointly produced by WGBH Boston and the BBC, it originally aired in the UK as The Dream Machine before its U.S. premiere in January 1992. Its broadcast was accompanied by a book co-written by the documentary's producer Jon Palfreman."&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>dependent-types</category><category>deslide</category><category>email</category><category>functional-programming</category><category>GHC extensions</category><category>haskell</category><category>html</category><category>imap</category><category>javascript</category><category>presentations</category><category>programming</category><category>scalability</category><category>slides</category><category>slideshow</category><category>template-haskell</category><category>testing</category><category>tools</category><category>types</category><category>webarchitecture</category><category>yesod</category><guid>http://michael-mccracken.net/2012/10/links/</guid><pubDate>Mon, 08 Oct 2012 07:47:00 GMT</pubDate></item><item><title>Links: Hacking, Music in Python, Rust &amp; unitasking</title><link>http://michael-mccracken.net/2012/04/links-hacking-music-in-python-rust-unitaskimg/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for April 5th through April 6th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://lemire.me/blog/archives/2011/06/06/why-i-still-program/"&gt;Why I still program&lt;/a&gt; - "I believe that the rejection of programming as a lower activity can be explained by the Theory of the leisure class. In effect, we do not seek utility but prestige. There is no prestige in tool-making, cooking or farming. To maximize your prestige, you must rise up to the leisure class: you work must not be immediately useful."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://lemire.me/blog/archives/2012/03/20/from-counting-citations-to-measuring-usage-help-needed/"&gt;From counting citations to measuring usage (help needed!)&lt;/a&gt; - Building a Better Citation Index&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mailplaneapp.com/blog/entry/workhacks.com_top_3_gmail_management_apps_for_mac"&gt;workhacks.com: Top 3 Gmail Management Apps for Mac - Mailplane Blog&lt;/a&gt; - includes a list of gmail plugins that look useful&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://prezjordan.github.com/Melopy/"&gt;Melopy&lt;/a&gt; - 
&lt;code&gt;  &lt;br&gt;
    """
    &amp;gt;&amp;gt;&amp;gt; from melopy import Melopy
    &amp;gt;&amp;gt;&amp;gt; m = Melopy('mysong')
    &amp;gt;&amp;gt;&amp;gt; m.add_quarter_note('A4')
    &amp;gt;&amp;gt;&amp;gt; m.add_quarter_note('C#5')
    &amp;gt;&amp;gt;&amp;gt; m.add_quarter_note('E5')
    &amp;gt;&amp;gt;&amp;gt; m.render()
    [==================================================] 100%
    Done
    """
&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://doc.rust-lang.org/doc/tutorial.html#expression-syntax"&gt;Rust Language Tutorial: Expression Syntax&lt;/a&gt; - Starts out good, but the "leave out a semicolon to return a value" leaves a bad taste. Why overload semicolons like that? Why not just use 'ret'?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.deliberatism.com/blog/forget-self-improvement/"&gt;Forget Self-Improvement&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blogs.hbr.org/schwartz/2012/03/the-magic-of-doing-one-thing-a.html"&gt;The Magic of Doing One Thing at a Time - Tony Schwartz - Harvard Business Review&lt;/a&gt; - A few good points on avoiding multitasking burnout. Nothing too new, but maybe if people keep repeating it in places like HBR, then it'll start to become conventional business wisdom?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>business</category><category>citation</category><category>email</category><category>gmail</category><category>impact</category><category>libraries</category><category>links</category><category>machine-learning</category><category>mikechecksmail</category><category>multitasking</category><category>music</category><category>pinboard-links</category><category>productivity</category><category>programming</category><category>publication</category><category>python</category><category>ranking</category><category>research</category><category>rust</category><guid>http://michael-mccracken.net/2012/04/links-hacking-music-in-python-rust-unitaskimg/</guid><pubDate>Wed, 11 Apr 2012 23:15:00 GMT</pubDate></item><item><title>Links: Flattr, Haskell, Haskell QuickCheck, and Stuart Cheshire (of Bolo fame)</title><link>http://michael-mccracken.net/2012/04/links-flattr-haskell-haskell-quickcheck-and-stuart-cheshire-of-bolo-fame/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for April 4th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.stuartcheshire.org/rants/Networkdynamics.html"&gt;Stuart's "Law of Networkdynamics"&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://flattr.com/"&gt;Flattr - Social micropayments&lt;/a&gt; - An interesting model that I hadn't heard of. You set a monthly amount to spend and when you see a flattr button, you click on it. They then divide your monthly amount among the people you clicked on that month.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds great but I have never seen a button, unless it's been hidden among many other warts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bos.github.com/strange-loop-2011/slides/slides.html#(1)"&gt;Haskell: Functional Programming, Solid Code, Big Data (1)&lt;/a&gt; - Bryan O'Sullivan's Haskell tutorial from Strange Loop 2011&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.yellosoft.us/quickcheck"&gt;QuickCheck | YELLOSOFT&lt;/a&gt; - Lots of ports of QuickCheck&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dan.bravender.us/2009/6/21/Simple_Quickcheck_implementation_for_Python.html"&gt;Simple Quickcheck implementation for Python&lt;/a&gt; - Random test generation that is not as nice as Haskell's quickcheck but will do the job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>cite:wmf</category><category>crowdfunding</category><category>haskell</category><category>latency</category><category>links</category><category>money</category><category>pinboard-links</category><category>presentation</category><category>programming</category><category>python</category><category>quickcheck</category><category>social</category><category>support</category><category>testing</category><category>tutorial</category><guid>http://michael-mccracken.net/2012/04/links-flattr-haskell-haskell-quickcheck-and-stuart-cheshire-of-bolo-fame/</guid><pubDate>Fri, 06 Apr 2012 23:20:00 GMT</pubDate></item><item><title>Links: Haskell, Music OCD Tools, Terrorism, Probability for Ranking things</title><link>http://michael-mccracken.net/2012/04/links-haskell-music-ocd-tools-terrorism-probability-for-ranking-things/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for March 30th through April 3rd:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://magicmaps.evanmiller.org/"&gt;Magic Maps: Now You See It.&lt;/a&gt; - Very cool app for working with maps and time series data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://evanmiller.org/how-not-to-sort-by-average-rating.html"&gt;How Not To Sort By Average Rating&lt;/a&gt; - Shows the best way to sort by positive/negative rankings that is robust to small sample sizes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://m.foreignaffairs.com/articles/66186/john-mueller-and-mark-g-stewart/hardly-existential"&gt;terrorism hardly existential threat. 2010&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mailplaneapp.com/blog/entry/workhacks.com_top_3_gmail_management_apps_for_mac/#When:12:06:06Z"&gt;workhacks.com: Top 3 Gmail Management Apps for Mac&lt;/a&gt; includes a list of gmail plugins that look useful &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.yesodweb.com/"&gt;Yesod Web Framework for Haskell&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://beets.radbox.org/"&gt;beets: the music geek's media organizer&lt;/a&gt; - The purpose of beets is to get your music collection right once and for all. It catalogs your collection, automatically improving its metadata as it goes using the MusicBrainz database. (It also downloads cover art for albums it imports.) Then it provides a bouquet of tools for manipulating and accessing your music.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because beets is designed as a library, it can do almost anything you can imagine for your music collection. Via plugins, beets becomes a panacea:&lt;/p&gt;
&lt;p&gt;Embed and extract album art from files' tags.
Listen to your library with a music player that speaks the MPD protocol and works with a staggering variety of interfaces.
Fetch lyrics for all your songs from databases on the Web.
Manage your MusicBrainz music collection.
Analyze music files' metadata from the command line.
Clean up crufty tags left behind by other, less-awesome tools.
Browse your music library graphically through a Web browser and play it in any browser that supports HTML5 Audio.&lt;/p&gt;&lt;/div&gt;</description><category>apps</category><category>framework</category><category>gmail</category><category>haskell</category><category>links</category><category>maps</category><category>music</category><category>ocd</category><category>pinboard-links</category><category>plugins</category><category>policy</category><category>programming</category><category>ranking</category><category>score</category><category>statistics</category><category>tagging</category><category>terrorism</category><category>web</category><guid>http://michael-mccracken.net/2012/04/links-haskell-music-ocd-tools-terrorism-probability-for-ranking-things/</guid><pubDate>Fri, 06 Apr 2012 23:16:00 GMT</pubDate></item><item><title>Links for mid-March see scalable python around corners. And Future Spies on Facebook!</title><link>http://michael-mccracken.net/2012/03/links-for-mid-march-see-scalable-python-around-corners-and-future-spies-on-facebook/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for March 18th through March 26th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html"&gt;7 Years of YouTube Scalability Lessons in 30 Minutes&lt;/a&gt; - Notes from a PyCon talk about the very pragmatic design philosophy at YouTube.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bkad/discoball"&gt;bkad/discoball * GitHub&lt;/a&gt; - shell tool to match and colorize lines of text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pragprog.com/book/kcdc/the-developer-s-code"&gt;The Pragmatic Bookshelf | The Developer's Code&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.nature.com/news/how-to-see-around-corners-1.10258"&gt;How to see around corners : Nature News &amp;amp; Comment&lt;/a&gt; - And we thought the future was flying cars.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.theregister.co.uk/2012/03/19/cia_internet_of_things/page2.html"&gt;ARM's ultra-low-power fridge-puter chips: Just what the CIA ordered • The Register&lt;/a&gt; - Out of context interesting quote: "The spy boss was chiefly concerned with the huge amounts of data that can be collected from American citizens who intend to become CIA agents - in an age when parents set up Twitter and Tumblr accounts for their newborns, managing the identities of future operatives suddenly becomes non-trivial."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://reprog.wordpress.com/2012/02/27/who-needs-access-you-need-access/"&gt;Who needs access? You need access!&lt;/a&gt; - new site about open access to research aimed at lay people (I think)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>architecture</category><category>ARM</category><category>CIA</category><category>colorize</category><category>future</category><category>imaging</category><category>internet-of-things</category><category>laser</category><category>links</category><category>logging</category><category>openaccess</category><category>philosophy</category><category>pinboard-links</category><category>programming</category><category>python</category><category>research</category><category>scalability</category><category>shell</category><category>spies</category><category>spycam</category><category>wisdom</category><guid>http://michael-mccracken.net/2012/03/links-for-mid-march-see-scalable-python-around-corners-and-future-spies-on-facebook/</guid><pubDate>Fri, 30 Mar 2012 19:20:00 GMT</pubDate></item><item><title>Links: JS, LaTeX, Live drawing and sound.</title><link>http://michael-mccracken.net/2012/03/links-js-latex-live-drawing-and-sound/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for March 5th through March 17th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://codemirror.net/"&gt;CodeMirror&lt;/a&gt; - "CodeMirror is a JavaScript library that can be used to create a relatively pleasant editor interface for code-like content ― computer programs, HTML markup, and similar. If a mode has been written for the language you are editing, the code will be coloured, and the editor will optionally help you with indentation."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://tacosw.com/latexian/"&gt;Latexian: A LaTeX Editor for Mac OS X&lt;/a&gt; - Nice looking latex editor with live preview.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.6 or higher so I can't try it just now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=JupqhcT4ONY"&gt;Core Graphics live - YouTube&lt;/a&gt; - Demo of live-preview graphics drawing tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://drc-fir.sourceforge.net/"&gt;DRC: Digital Room Correction&lt;/a&gt; - "RC is a program used to generate correction filters for acoustic compensation of HiFi and audio systems in general, including listening room compensation. DRC generates just the FIR correction filters, which can be used with a real time or offline convolver to provide real time or offline correction. DRC doesn't provide convolution features, and provides only some simplified, although really accurate, measuring tools."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/shoaibkamil/asp/wiki"&gt;ASP: A SEJITS Implementation for Python * shoaibkamil/asp Wiki * GitHub&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>acoustic</category><category>audio</category><category>coregraphics</category><category>drawing</category><category>editor</category><category>home-theater</category><category>javascript</category><category>JIT</category><category>latex</category><category>links</category><category>mac</category><category>macosx</category><category>pinboard-links</category><category>programming</category><category>python</category><category>sejits</category><category>speakers</category><category>syntax-highlighting</category><guid>http://michael-mccracken.net/2012/03/links-js-latex-live-drawing-and-sound/</guid><pubDate>Mon, 19 Mar 2012 21:29:00 GMT</pubDate></item><item><title>Links: More PyPy, Academia, Censorship we Love, and Monads</title><link>http://michael-mccracken.net/2012/03/more-pypy-academia-censorship-we-love-and-monads/</link><dc:creator>Michael McCracken</dc:creator><description>&lt;div&gt;&lt;p&gt;My shared links for March 1st through March 5th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/8452396/does-pypy-translate-itself/8569919#8569919"&gt;python - Does PyPY translate itself? - Stack Overflow&lt;/a&gt; - An informative answer about how PyPy works&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://lars.com/2011/01/08/on-reviewing-research-papers/"&gt;On reviewing research papers « Lars Bergstrom&lt;/a&gt; - So, PL has a culture of really useful reviews, huh?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.paulgraham.com/love.html"&gt;How to Do What You Love&lt;/a&gt; - "If you think something's supposed to hurt, you're less likely to notice if you're doing it wrong. That about sums up my experience of graduate school."&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boom!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.themillions.com/2012/03/ban-this-book-an-uncensored-look-at-the-lorax-and-other-dangerous-books.html"&gt;The Millions : Ban This Book: An Uncensored Look At The Lorax And Other Dangerous Books&lt;/a&gt; - &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html"&gt;A Neighborhood of Infinity: You Could Have Invented Monads! (And Maybe You Already Have.)&lt;/a&gt; - A practical way of thinking about monads.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>academia</category><category>haskell</category><category>links</category><category>monads</category><category>pg</category><category>pinboard-links</category><category>programming</category><category>publishing</category><category>pypy</category><category>python</category><category>research</category><category>rpy</category><guid>http://michael-mccracken.net/2012/03/more-pypy-academia-censorship-we-love-and-monads/</guid><pubDate>Tue, 06 Mar 2012 19:39:00 GMT</pubDate></item></channel></rss>